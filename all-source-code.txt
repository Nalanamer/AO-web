================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\activities\ActivitiesMap.tsx
================================================================================
// components/activities/ActivitiesMap.tsx - Interactive map view for activities
import React, { useState } from 'react';

// Define interfaces locally
interface Activity {
  $id: string;
  activityname: string;
  location: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  types?: string[];
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  isPrivate?: boolean;
  userId: string;
  createdAt: string;
  participantCount?: number;
  eventCount?: number;
}

interface ActivitiesMapProps {
  activities: Activity[];
  onActivitySelect: (activity: Activity) => void;
  userLocation?: {
    address: string;
    latitude: number;
    longitude: number;
  } | string;
}

const ActivitiesMap: React.FC<ActivitiesMapProps> = ({ 
  activities, 
  onActivitySelect, 
  userLocation 
}) => {
  const [selectedActivity, setSelectedActivity] = useState<Activity | null>(null);
  const [mapView, setMapView] = useState<'street' | 'satellite' | 'terrain'>('street');

  // Get location string for display
  const getLocationString = (location: string | { address: string; latitude: number; longitude: number }) => {
    if (typeof location === 'string') return location;
    return location.address;
  };

  // Get difficulty color
  const getDifficultyColor = (difficulty?: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-500';
      case 'intermediate': return 'bg-yellow-500';
      case 'advanced': return 'bg-red-500';
      case 'expert': return 'bg-purple-500';
      default: return 'bg-gray-500';
    }
  };

  // Handle activity marker click
  const handleActivityClick = (activity: Activity) => {
    setSelectedActivity(activity);
  };

  // Handle activity selection
  const handleSelectActivity = (activity: Activity) => {
    onActivitySelect(activity);
  };

  return (
    <div className="relative w-full h-full bg-gray-100 dark:bg-slate-800 rounded-lg overflow-hidden">
      {/* Map Container */}
      <div className="relative w-full h-full">
        {/* Placeholder Map Background */}
        <div className="w-full h-full bg-gradient-to-br from-green-100 to-blue-100 dark:from-slate-700 dark:to-slate-600 flex items-center justify-center">
          <div className="text-center p-8">
            <div className="text-6xl mb-4">ðŸ—ºï¸</div>
            <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">
              Interactive Map View
            </h3>
            <p className="text-gray-600 dark:text-gray-300 mb-4">
              Map integration coming soon! For now, explore activities in the list below.
            </p>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              ðŸ“ {activities.length} activities in your area
            </div>
          </div>
        </div>

        {/* Map Controls */}
        <div className="absolute top-4 right-4 flex flex-col space-y-2">
          {/* View Mode Toggle */}
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-slate-600 p-1">
            <button
              onClick={() => setMapView('street')}
              className={`px-3 py-1 rounded text-xs transition-colors ${
                mapView === 'street'
                  ? 'bg-emerald-600 text-white'
                  : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700'
              }`}
            >
              Street
            </button>
            <button
              onClick={() => setMapView('satellite')}
              className={`px-3 py-1 rounded text-xs transition-colors ${
                mapView === 'satellite'
                  ? 'bg-emerald-600 text-white'
                  : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700'
              }`}
            >
              Satellite
            </button>
            <button
              onClick={() => setMapView('terrain')}
              className={`px-3 py-1 rounded text-xs transition-colors ${
                mapView === 'terrain'
                  ? 'bg-emerald-600 text-white'
                  : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700'
              }`}
            >
              Terrain
            </button>
          </div>

          {/* Zoom Controls */}
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-slate-600 flex flex-col">
            <button className="p-2 hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors rounded-t-lg">
              <svg className="h-4 w-4 text-gray-600 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
            </button>
            <div className="border-t border-gray-200 dark:border-slate-600"></div>
            <button className="p-2 hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors rounded-b-lg">
              <svg className="h-4 w-4 text-gray-600 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
              </svg>
            </button>
          </div>
        </div>

        {/* Activity Markers Overlay */}
        <div className="absolute inset-0 pointer-events-none">
          {activities.slice(0, 8).map((activity, index) => (
            <div
              key={activity.$id}
              className="absolute pointer-events-auto cursor-pointer transform -translate-x-1/2 -translate-y-1/2"
              style={{
                // Distribute markers across the map area
                left: `${20 + (index % 4) * 20}%`,
                top: `${20 + Math.floor(index / 4) * 30}%`,
              }}
              onClick={() => handleActivityClick(activity)}
            >
              {/* Activity Marker */}
              <div className={`
                w-8 h-8 rounded-full border-2 border-white shadow-lg flex items-center justify-center
                ${getDifficultyColor(activity.difficulty)}
                ${selectedActivity?.$id === activity.$id ? 'ring-4 ring-emerald-300' : ''}
                hover:scale-110 transition-transform
              `}>
                <span className="text-white text-xs font-bold">
                  {activity.activityname.charAt(0).toUpperCase()}
                </span>
              </div>

              {/* Activity Tooltip */}
              {selectedActivity?.$id === activity.$id && (
                <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-slate-600 p-3 w-64 z-10">
                  <div className="flex items-start justify-between mb-2">
                    <h4 className="font-semibold text-gray-900 dark:text-white text-sm line-clamp-1">
                      {activity.activityname}
                    </h4>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedActivity(null);
                      }}
                      className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                    >
                      <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                  
                  <p className="text-xs text-gray-600 dark:text-gray-300 mb-2">
                    ðŸ“ {getLocationString(activity.location)}
                  </p>
                  
                  {activity.description && (
                    <p className="text-xs text-gray-500 dark:text-gray-400 mb-3 line-clamp-2">
                      {activity.description}
                    </p>
                  )}
                  
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2 text-xs text-gray-600 dark:text-gray-300">
                      {activity.difficulty && (
                        <span className={`
                          px-2 py-1 rounded-full text-white text-xs
                          ${getDifficultyColor(activity.difficulty)}
                        `}>
                          {activity.difficulty}
                        </span>
                      )}
                      {activity.eventCount !== undefined && (
                        <span>ðŸ“… {activity.eventCount}</span>
                      )}
                    </div>
                    
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSelectActivity(activity);
                      }}
                      className="bg-emerald-600 hover:bg-emerald-700 text-white px-3 py-1 rounded text-xs transition-colors"
                    >
                      View Details
                    </button>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* User Location Marker */}
        {userLocation && (
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none">
            <div className="w-4 h-4 bg-blue-600 rounded-full border-2 border-white shadow-lg">
              <div className="w-8 h-8 bg-blue-200 rounded-full opacity-50 absolute -top-2 -left-2 animate-ping"></div>
            </div>
          </div>
        )}
      </div>

      {/* Map Legend */}
      <div className="absolute bottom-4 left-4 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-slate-600 p-3">
        <h4 className="text-xs font-semibold text-gray-900 dark:text-white mb-2">
          Difficulty Levels
        </h4>
        <div className="space-y-1">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
            <span className="text-xs text-gray-600 dark:text-gray-300">Beginner</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
            <span className="text-xs text-gray-600 dark:text-gray-300">Intermediate</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-red-500 rounded-full"></div>
            <span className="text-xs text-gray-600 dark:text-gray-300">Advanced</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
            <span className="text-xs text-gray-600 dark:text-gray-300">Expert</span>
          </div>
        </div>
      </div>

      {/* Activities List Overlay */}
      {activities.length > 8 && (
        <div className="absolute bottom-4 right-4 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-slate-600 p-3">
          <div className="text-xs text-gray-600 dark:text-gray-300">
            Showing 8 of {activities.length} activities
          </div>
          <button className="text-xs text-emerald-600 dark:text-emerald-400 hover:underline mt-1">
            View all in list
          </button>
        </div>
      )}
    </div>
  );
};

export default ActivitiesMap;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\activities\ActivityCard.tsx
================================================================================
// components/activities/ActivityCard.tsx - Fixed with compact prop
import React from 'react';

// Define interfaces locally to avoid import issues
interface Activity {
  $id: string;
  activityname: string;
  location: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  types?: string[];
  eventCount?: number;
  participantCount?: number;
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  isPrivate?: boolean;
  userId: string;
  createdAt: string;
  updatedAt?: string;
  rating?: number;
  reviewCount?: number;
  externalUrls?: string[];
  inclusive?: string[];
  subTypes?: string[];
  typeSpecificData?: Record<string, any>;
}

interface User {
  $id: string;
  name?: string;
  email: string;
  location?: {
    address: string;
    latitude: number;
    longitude: number;
  } | string;
}

interface ActivityCardProps {
  activity: Activity;
  onPress?: () => void;
  user?: User | null;
  showActions?: boolean;
  compact?: boolean; // âœ… Added compact prop
}

const ActivityCard: React.FC<ActivityCardProps> = ({ 
  activity, 
  onPress, 
  user, 
  showActions = true,
  compact = false // âœ… Default value for compact
}) => {
  const isOwner = user && activity.userId === user.$id;

  // Get difficulty emoji and color
  const getDifficultyInfo = (difficulty?: string) => {
    switch (difficulty) {
      case 'beginner':
        return { emoji: 'ðŸŸ¢', color: 'text-green-600', label: 'Beginner' };
      case 'intermediate':
        return { emoji: 'ðŸŸ¡', color: 'text-yellow-600', label: 'Intermediate' };
      case 'advanced':
        return { emoji: 'ðŸ”´', color: 'text-red-600', label: 'Advanced' };
      case 'expert':
        return { emoji: 'ðŸŸ£', color: 'text-purple-600', label: 'Expert' };
      default:
        return { emoji: 'âšª', color: 'text-gray-600', label: 'Unknown' };
    }
  };

  const difficultyInfo = getDifficultyInfo(activity.difficulty);

  // Format location string
  const formatLocation = (location: string | { address: string; latitude: number; longitude: number }) => {
    if (typeof location === 'string') return location;
    return location.address;
  };

  // Format date
  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return 'Unknown date';
    }
  };

  return (
    <div 
      className={`
        bg-white dark:bg-slate-800 rounded-lg border border-gray-200 dark:border-slate-700 
        hover:shadow-md transition-all duration-200 cursor-pointer
        ${compact ? 'p-4' : 'p-6'}
      `}
      onClick={onPress}
    >
      {/* Header */}
      <div className="flex items-start justify-between mb-3">
        <div className="flex-1">
          <h3 className={`font-semibold text-gray-900 dark:text-white line-clamp-2 ${compact ? 'text-base' : 'text-lg'}`}>
            {activity.activityname}
          </h3>
          <p className={`text-gray-600 dark:text-gray-300 flex items-center mt-1 ${compact ? 'text-xs' : 'text-sm'}`}>
            ðŸ“ {formatLocation(activity.location)}
          </p>
        </div>

        {/* Privacy indicator */}
        {activity.isPrivate && (
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 dark:bg-slate-700 text-gray-600 dark:text-gray-300">
            ðŸ”’ Private
          </span>
        )}

        {/* Owner actions menu */}
        {showActions && isOwner && (
          <div className="relative ml-2">
            <button className="p-1 rounded-full hover:bg-gray-100 dark:hover:bg-slate-700">
              <svg className="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01" />
              </svg>
            </button>
          </div>
        )}
      </div>

      {/* Description */}
      {activity.description && !compact && (
        <p className="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
          {activity.description}
        </p>
      )}

      {/* Activity Types */}
      {activity.types && activity.types.length > 0 && (
        <div className="flex flex-wrap gap-1 mb-3">
          {activity.types.slice(0, compact ? 2 : 3).map((type: string, index: number) => (
            <span
              key={index}
              className={`inline-flex items-center px-2 py-1 rounded-full bg-emerald-100 dark:bg-emerald-900 text-emerald-800 dark:text-emerald-200 ${compact ? 'text-xs' : 'text-sm'}`}
            >
              {type}
            </span>
          ))}
          {activity.types.length > (compact ? 2 : 3) && (
            <span className={`inline-flex items-center px-2 py-1 rounded-full bg-gray-100 dark:bg-slate-700 text-gray-600 dark:text-gray-300 ${compact ? 'text-xs' : 'text-sm'}`}>
              +{activity.types.length - (compact ? 2 : 3)}
            </span>
          )}
        </div>
      )}

      {/* Stats Row */}
      <div className={`flex items-center justify-between ${compact ? 'text-xs' : 'text-sm'}`}>
        <div className="flex items-center space-x-4 text-gray-600 dark:text-gray-300">
          {/* Difficulty */}
          <div className="flex items-center space-x-1">
            <span>{difficultyInfo.emoji}</span>
            <span className={compact ? 'hidden' : 'block'}>{difficultyInfo.label}</span>
          </div>

          {/* Event count */}
          {activity.eventCount !== undefined && (
            <div className="flex items-center space-x-1">
              <span>ðŸ“…</span>
              <span>{activity.eventCount} event{activity.eventCount !== 1 ? 's' : ''}</span>
            </div>
          )}

          {/* Participant count */}
          {activity.participantCount !== undefined && (
            <div className="flex items-center space-x-1">
              <span>ðŸ‘¥</span>
              <span>{activity.participantCount}</span>
            </div>
          )}
        </div>

        {/* Rating */}
        {activity.rating && activity.reviewCount && !compact && (
          <div className="flex items-center space-x-1 text-yellow-500">
            <span>â­</span>
            <span className="text-gray-600 dark:text-gray-300">
              {activity.rating.toFixed(1)} ({activity.reviewCount})
            </span>
          </div>
        )}
      </div>

      {/* Inclusive features */}
      {activity.inclusive && activity.inclusive.length > 0 && !compact && (
        <div className="flex flex-wrap gap-1 mt-3">
          {activity.inclusive.slice(0, 3).map((feature: string, index: number) => {
            const getInclusiveEmoji = (feature: string) => {
              if (feature.includes('wheelchair')) return 'â™¿';
              if (feature.includes('beginner')) return 'ðŸ‘¶';
              if (feature.includes('family')) return 'ðŸ‘¨â€ðŸ‘©â€ðŸ‘§â€ðŸ‘¦';
              if (feature.includes('pet')) return 'ðŸ•';
              if (feature.includes('lgbtq')) return 'ðŸ³ï¸â€ðŸŒˆ';
              if (feature.includes('senior')) return 'ðŸ‘´';
              if (feature.includes('youth')) return 'ðŸ‘¦';
              return 'âœ¨';
            };

            return (
              <span
                key={index}
                className="inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200"
              >
                <span>{getInclusiveEmoji(feature)}</span>
                <span className="capitalize">{feature.replace('-', ' ')}</span>
              </span>
            );
          })}
          {activity.inclusive.length > 3 && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 dark:bg-slate-700 text-gray-600 dark:text-gray-300">
              +{activity.inclusive.length - 3} more
            </span>
          )}
        </div>
      )}

      {/* Footer */}
      <div className={`flex items-center justify-between pt-3 mt-3 border-t border-gray-200 dark:border-slate-600 ${compact ? 'text-xs' : 'text-sm'}`}>
        <span className="text-gray-500 dark:text-gray-400">
          Created {formatDate(activity.createdAt)}
        </span>
        
        {/* External links */}
        {activity.externalUrls && activity.externalUrls.length > 0 && (
          <button 
            onClick={(e) => {
              e.stopPropagation();
              window.open(activity.externalUrls![0], '_blank');
            }}
            className="text-emerald-600 dark:text-emerald-400 hover:underline"
          >
            ðŸ”— Learn More
          </button>
        )}
      </div>
    </div>
  );
};

export default ActivityCard;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\activities\FilterModal.tsx
================================================================================
// components/activities/FilterModal.tsx - Simple, safe implementation
import React from 'react';

// Define interfaces locally to avoid import issues
interface ActivityFilters {
  query?: string;
  types?: string[];
  difficulty?: string[];
  dateRange?: {
    start: string;
    end: string;
  };
  location?: {
    address: string;
    radius: number;
  };
  maxParticipants?: number;
  inclusive?: string[];
  nearMe?: boolean;
  hasEvents?: boolean;
  privacy?: 'public' | 'private' | 'all';
  radius?: number;
}

interface FilterModalProps {
  isOpen: boolean;
  onClose: () => void;
  filters: ActivityFilters;
  onFiltersChange: (filters: ActivityFilters) => void;
  onApply: () => void;
}

const FilterModal: React.FC<FilterModalProps> = ({ 
  isOpen, 
  onClose, 
  filters, 
  onFiltersChange, 
  onApply 
}) => {
  if (!isOpen) return null;

  const handleClose = () => {
    onClose();
  };

  const handleApply = () => {
    onApply();
  };

  const handleClear = () => {
    onFiltersChange({
      types: [],
      difficulty: [],
      nearMe: false,
      hasEvents: undefined,
      privacy: 'all',
      radius: 50
    });
  };

  const updateFilter = (key: keyof ActivityFilters, value: any) => {
    onFiltersChange({
      ...filters,
      [key]: value
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-slate-800 rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-slate-600">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Filters</h2>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div className="p-4 space-y-4">
          {/* Difficulty */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Difficulty
            </label>
            <div className="space-y-2">
              {['beginner', 'intermediate', 'advanced', 'expert'].map((level) => (
                <label key={level} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={filters.difficulty?.includes(level) || false}
                    onChange={(e) => {
                      const current = filters.difficulty || [];
                      const updated = e.target.checked
                        ? [...current, level]
                        : current.filter(d => d !== level);
                      updateFilter('difficulty', updated);
                    }}
                    className="rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
                  />
                  <span className="ml-2 text-sm text-gray-700 dark:text-gray-300 capitalize">
                    {level}
                  </span>
                </label>
              ))}
            </div>
          </div>

          {/* Activity Types */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Activity Types
            </label>
            <div className="space-y-2">
              {['hiking', 'climbing', 'cycling', 'water-sports', 'winter-sports'].map((type) => (
                <label key={type} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={filters.types?.includes(type) || false}
                    onChange={(e) => {
                      const current = filters.types || [];
                      const updated = e.target.checked
                        ? [...current, type]
                        : current.filter(t => t !== type);
                      updateFilter('types', updated);
                    }}
                    className="rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
                  />
                  <span className="ml-2 text-sm text-gray-700 dark:text-gray-300 capitalize">
                    {type.replace('-', ' ')}
                  </span>
                </label>
              ))}
            </div>
          </div>

          {/* Near Me */}
          <div>
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={filters.nearMe || false}
                onChange={(e) => updateFilter('nearMe', e.target.checked)}
                className="rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
              />
              <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                Near my location
              </span>
            </label>
          </div>

          {/* Search Radius */}
          {filters.nearMe && (
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Search Radius: {filters.radius || 50} km
              </label>
              <input
                type="range"
                min="5"
                max="200"
                value={filters.radius || 50}
                onChange={(e) => updateFilter('radius', parseInt(e.target.value))}
                className="w-full"
              />
            </div>
          )}

          {/* Privacy */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Privacy
            </label>
            <select
              value={filters.privacy || 'all'}
              onChange={(e) => updateFilter('privacy', e.target.value)}
              className="w-full rounded-md border-gray-300 dark:border-slate-600 dark:bg-slate-700 text-sm"
            >
              <option value="all">All Activities</option>
              <option value="public">Public Only</option>
              <option value="private">Private Only</option>
            </select>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-4 border-t border-gray-200 dark:border-slate-600">
          <button
            onClick={handleClear}
            className="text-sm text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100"
          >
            Clear All
          </button>
          <div className="flex space-x-3">
            <button
              onClick={handleClose}
              className="px-4 py-2 text-sm text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100"
            >
              Cancel
            </button>
            <button
              onClick={handleApply}
              className="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg text-sm transition-colors"
            >
              Apply Filters
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FilterModal;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\activities\SearchBar.tsx
================================================================================
// components/activities/SearchBar.tsx - Separate file
import React from 'react';

interface SearchBarProps {
  value: string;
  onChange: (value: string) => void;
  onSearch: () => void;
  placeholder?: string;
}

const SearchBar: React.FC<SearchBarProps> = ({ 
  value, 
  onChange, 
  onSearch, 
  placeholder = "Search..." 
}) => {
  return (
    <div className="relative max-w-md">
      <input
        type="text"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && onSearch()}
        placeholder={placeholder}
        className="w-full px-4 py-2 pl-10 pr-20 text-sm border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none"
      />
      <svg 
        className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
      <button
        onClick={onSearch}
        className="absolute right-2 top-1/2 transform -translate-y-1/2 px-3 py-1 text-xs bg-emerald-600 text-white rounded-md hover:bg-emerald-700 transition-colors"
      >
        Search
      </button>
    </div>
  );
};

export default SearchBar;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\chat\ChatInterface.tsx
================================================================================
// components/chat/ChatInterface.tsx - SIMPLIFIED VERSION
import React, { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { useChatStore } from '../../stores/chatStore';

// Simple message display component
const SimpleMessageList: React.FC = () => {
  const { messages, isLoading } = useChatStore();

  return (
    <div style={{ 
      flex: 1, 
      overflowY: 'auto', 
      padding: '20px', 
      backgroundColor: '#f9fafb' 
    }}>
      {messages.length === 0 && !isLoading ? (
        <div style={{ 
          textAlign: 'center', 
          padding: '40px', 
          color: '#6b7280' 
        }}>
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>ðŸ’¬</div>
          <h3 style={{ margin: '0 0 8px 0', fontSize: '18px', color: '#374151' }}>
            Start a conversation
          </h3>
          <p style={{ margin: 0, fontSize: '14px' }}>
            Send a message or upload files to test the chat system.
          </p>
        </div>
      ) : (
        <div style={{ maxWidth: '800px', margin: '0 auto' }}>
          {messages.map((message) => (
            <div 
              key={message.id} 
              style={{ 
                display: 'flex', 
                justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start',
                marginBottom: '20px'
              }}
            >
              <div style={{
                maxWidth: '70%',
                padding: '12px 16px',
                borderRadius: '12px',
                backgroundColor: message.role === 'user' ? '#3b82f6' : '#ffffff',
                color: message.role === 'user' ? '#ffffff' : '#374151',
                border: message.role === 'assistant' ? '1px solid #e5e7eb' : 'none',
                fontSize: '14px',
                lineHeight: '1.5'
              }}>
                <div style={{ whiteSpace: 'pre-wrap' }}>{message.content}</div>
                
                {/* File attachments */}
                {message.files && message.files.length > 0 && (
                  <div style={{ marginTop: '8px', paddingTop: '8px', borderTop: '1px solid rgba(255,255,255,0.2)' }}>
                    {message.files.map((file, index) => (
                      <div key={index} style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '8px',
                        padding: '4px 0' 
                      }}>
                        <span style={{ fontSize: '16px' }}>ðŸ“Ž</span>
                        <span style={{ fontSize: '12px', opacity: 0.9 }}>{file.name}</span>
                      </div>
                    ))}
                  </div>
                )}
                
                {/* Timestamp and status */}
                <div style={{ 
                  fontSize: '11px', 
                  opacity: 0.7, 
                  marginTop: '4px',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}>
                  <span>{message.timestamp.toLocaleTimeString()}</span>
                  {message.status === 'sending' && <span>Sending...</span>}
                  {message.status === 'error' && <span style={{ color: '#ef4444' }}>Failed</span>}
                </div>
              </div>
            </div>
          ))}

          {/* Loading indicator */}
          {isLoading && (
            <div style={{ 
              display: 'flex', 
              justifyContent: 'flex-start',
              marginBottom: '20px'
            }}>
              <div style={{
                padding: '12px 16px',
                borderRadius: '12px',
                backgroundColor: '#ffffff',
                border: '1px solid #e5e7eb',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}>
                <div style={{
                  width: '16px',
                  height: '16px',
                  border: '2px solid #e5e7eb',
                  borderTop: '2px solid #3b82f6',
                  borderRadius: '50%',
                  animation: 'spin 1s linear infinite'
                }}></div>
                <span style={{ fontSize: '14px', color: '#6b7280' }}>AI is thinking...</span>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// Simple message input component
const SimpleMessageInput: React.FC = () => {
  const [message, setMessage] = useState('');
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const { sendMessage, isLoading, connectionStatus } = useChatStore();
  const { user } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if ((!message.trim() && selectedFiles.length === 0) || isLoading || !user) {
      return;
    }
    
    const messageToSend = message.trim();
    const filesToSend = [...selectedFiles];
    
    setMessage('');
    setSelectedFiles([]);
    
    try {
      await sendMessage(messageToSend || 'ðŸ“Ž Files attached', filesToSend);
    } catch (error) {
      console.error('Failed to send message:', error);
      if (!filesToSend.length) {
        setMessage(messageToSend);
      }
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files);
      setSelectedFiles(prev => [...prev, ...newFiles]);
    }
  };

  const removeFile = (index: number) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const isDisabled = isLoading || connectionStatus !== 'connected' || !user;

  return (
    <div style={{ 
      backgroundColor: '#ffffff', 
      borderTop: '1px solid #e5e7eb', 
      padding: '20px' 
    }}>
      {/* Selected Files */}
      {selectedFiles.length > 0 && (
        <div style={{ 
          marginBottom: '16px', 
          padding: '12px', 
          backgroundColor: '#f3f4f6', 
          borderRadius: '8px' 
        }}>
          <div style={{ 
            fontSize: '12px', 
            fontWeight: '500', 
            marginBottom: '8px', 
            color: '#374151' 
          }}>
            Selected Files ({selectedFiles.length})
          </div>
          {selectedFiles.map((file, index) => (
            <div key={index} style={{ 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'space-between',
              padding: '6px 8px',
              backgroundColor: '#ffffff',
              borderRadius: '4px',
              marginBottom: '4px'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <span>ðŸ“Ž</span>
                <div>
                  <div style={{ fontSize: '12px', fontWeight: '500' }}>{file.name}</div>
                  <div style={{ fontSize: '10px', color: '#6b7280' }}>{formatFileSize(file.size)}</div>
                </div>
              </div>
              <button
                onClick={() => removeFile(index)}
                style={{
                  background: 'none',
                  border: 'none',
                  color: '#ef4444',
                  cursor: 'pointer',
                  padding: '4px',
                  fontSize: '12px'
                }}
              >
                âœ•
              </button>
            </div>
          ))}
        </div>
      )}

      {/* Input Form */}
      <form onSubmit={handleSubmit} style={{ display: 'flex', gap: '12px', alignItems: 'end' }}>
        {/* File Upload Button */}
        <div style={{ position: 'relative' }}>
          <input
            type="file"
            multiple
            onChange={handleFileSelect}
            style={{
              position: 'absolute',
              opacity: 0,
              width: '100%',
              height: '100%',
              cursor: 'pointer'
            }}
            disabled={isDisabled}
          />
          <button
            type="button"
            disabled={isDisabled}
            style={{
              padding: '8px',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              backgroundColor: '#ffffff',
              color: isDisabled ? '#9ca3af' : '#374151',
              cursor: isDisabled ? 'not-allowed' : 'pointer',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
            title="Attach files"
          >
            ðŸ“Ž
          </button>
        </div>

        {/* Message Input */}
        <textarea
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder={
            !user ? "Please log in to send messages..." :
            connectionStatus !== 'connected' ? "Connecting..." :
            "Type your message..."
          }
          disabled={isDisabled}
          rows={1}
          style={{
            flex: 1,
            padding: '8px 12px',
            border: '1px solid #d1d5db',
            borderRadius: '6px',
            resize: 'none',
            fontSize: '14px',
            backgroundColor: isDisabled ? '#f3f4f6' : '#ffffff',
            color: isDisabled ? '#9ca3af' : '#374151',
            minHeight: '36px',
            maxHeight: '120px'
          }}
          onKeyDown={(e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              handleSubmit(e as any);
            }
          }}
        />
        
        {/* Send Button */}
        <button
          type="submit"
          disabled={isDisabled || (!message.trim() && selectedFiles.length === 0)}
          style={{
            padding: '8px 16px',
            backgroundColor: isDisabled || (!message.trim() && selectedFiles.length === 0) ? '#9ca3af' : '#3b82f6',
            color: '#ffffff',
            border: 'none',
            borderRadius: '6px',
            cursor: isDisabled || (!message.trim() && selectedFiles.length === 0) ? 'not-allowed' : 'pointer',
            fontSize: '14px',
            fontWeight: '500',
            display: 'flex',
            alignItems: 'center',
            gap: '4px'
          }}
        >
          {isLoading ? (
            <>
              <div style={{
                width: '12px',
                height: '12px',
                border: '2px solid rgba(255,255,255,0.3)',
                borderTop: '2px solid #ffffff',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite'
              }}></div>
              Sending...
            </>
          ) : (
            <>
              âž¤ Send
            </>
          )}
        </button>
      </form>
      
      <div style={{ 
        marginTop: '8px', 
        fontSize: '11px', 
        color: '#6b7280', 
        textAlign: 'center' 
      }}>
        Press Enter to send â€¢ Shift+Enter for new line
      </div>
    </div>
  );
};

// Main chat interface component
export const ChatInterface: React.FC = () => {
  const { user, logout } = useAuth();
  const { 
    messages, 
    connectionStatus, 
    clearMessages, 
    error, 
    subscription 
  } = useChatStore();

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  const handleClearChat = () => {
    if (confirm('Are you sure you want to clear all messages?')) {
      clearMessages();
    }
  };

  const getConnectionStatusColor = () => {
    switch (connectionStatus) {
      case 'connected': return '#10b981';
      case 'connecting': return '#f59e0b';
      case 'error': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'connected': return 'Connected';
      case 'connecting': return 'Connecting...';
      case 'error': return 'Connection Error';
      default: return 'Disconnected';
    }
  };

  return (
    <>
      {/* Add CSS animation for spinner */}
      <style>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
      
      <div style={{ 
        height: '100vh', 
        display: 'flex', 
        flexDirection: 'column',
        backgroundColor: '#f9fafb',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
      }}>
        {/* Header */}
        <div style={{ 
          backgroundColor: '#ffffff', 
          borderBottom: '1px solid #e5e7eb', 
          padding: '16px 24px',
          flexShrink: 0
        }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'space-between' 
          }}>
            <div>
              <h1 style={{ 
                margin: '0 0 4px 0', 
                fontSize: '20px', 
                fontWeight: '600', 
                color: '#111827' 
              }}>
                AdventureOne Chat
              </h1>
              <p style={{ 
                margin: 0, 
                fontSize: '14px', 
                color: '#6b7280' 
              }}>
                Welcome back, {user?.name}! 
                {subscription && (
                  <span> â€¢ {subscription.plan.charAt(0).toUpperCase() + subscription.plan.slice(1)} Plan</span>
                )}
              </p>
            </div>
            
            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '16px' 
            }}>
              {/* Connection Status */}
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '6px' 
              }}>
                <div style={{
                  width: '8px',
                  height: '8px',
                  borderRadius: '50%',
                  backgroundColor: getConnectionStatusColor()
                }}></div>
                <span style={{ 
                  fontSize: '12px', 
                  color: '#6b7280' 
                }}>
                  {getConnectionStatusText()}
                </span>
              </div>

              {/* Usage Info */}
              {subscription && subscription.usage.maxMessages !== -1 && (
                <div style={{ 
                  fontSize: '12px', 
                  color: '#6b7280' 
                }}>
                  {subscription.usage.messagesThisMonth}/{subscription.usage.maxMessages} messages
                </div>
              )}

              {/* Actions */}
              <div style={{ 
                display: 'flex', 
                gap: '8px' 
              }}>
                <button
                  onClick={handleClearChat}
                  disabled={messages.length === 0}
                  style={{
                    padding: '6px 12px',
                    fontSize: '12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    backgroundColor: '#ffffff',
                    color: messages.length === 0 ? '#9ca3af' : '#374151',
                    cursor: messages.length === 0 ? 'not-allowed' : 'pointer'
                  }}
                >
                  Clear Chat
                </button>
                
                <button
                  onClick={handleLogout}
                  style={{
                    padding: '6px 12px',
                    fontSize: '12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    backgroundColor: '#374151',
                    color: '#ffffff',
                    cursor: 'pointer'
                  }}
                >
                  Logout
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Error Banner */}
        {error && (
          <div style={{ 
            backgroundColor: '#fef2f2', 
            borderBottom: '1px solid #fecaca', 
            padding: '12px 24px',
            flexShrink: 0
          }}>
            <div style={{ 
              display: 'flex', 
              alignItems: 'center',
              gap: '8px',
              fontSize: '14px',
              color: '#dc2626'
            }}>
              <span>âš ï¸</span>
              {error}
            </div>
          </div>
        )}

        {/* Usage Warning */}
        {subscription && subscription.usage.maxMessages !== -1 && 
         subscription.usage.messagesThisMonth >= subscription.usage.maxMessages * 0.8 && (
          <div style={{ 
            backgroundColor: '#fef3c7', 
            borderBottom: '1px solid #fde68a', 
            padding: '8px 24px',
            flexShrink: 0
          }}>
            <div style={{ 
              fontSize: '12px',
              color: '#92400e',
              textAlign: 'center'
            }}>
              âš¡ You're approaching your monthly message limit. 
              {subscription.plan === 'free' && (
                <span> Upgrade to Pro for unlimited messages!</span>
              )}
            </div>
          </div>
        )}

        {/* Messages */}
        <SimpleMessageList />

        {/* Input */}
        <SimpleMessageInput />
      </div>
    </>
  );
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\chat\FileUpload.tsx
================================================================================
// components/chat/FileUpload.tsx - Drag & drop file upload with preview
import React, { useState, useCallback, useRef } from 'react';
import { useAuth } from '../../contexts/AuthContext';

interface FileUploadProps {
  onFileSelect: (files: File[]) => void;
  maxFiles?: number;
  maxSizeInMB?: number;
  acceptedTypes?: string[];
  className?: string;
}

interface UploadedFile {
  file: File;
  id: string;
  preview?: string;
  status: 'pending' | 'uploading' | 'success' | 'error';
  error?: string;
}

const ACCEPTED_FILE_TYPES = {
  'image/*': ['jpg', 'jpeg', 'png', 'gif', 'webp'],
  'application/pdf': ['pdf'],
  'application/msword': ['doc'],
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['docx'],
  'text/plain': ['txt'],
  'text/csv': ['csv'],
  'application/vnd.ms-excel': ['xls'],
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['xlsx'],
  'application/json': ['json'],
  'text/javascript': ['js'],
  'text/typescript': ['ts'],
  'text/jsx': ['jsx'],
  'text/tsx': ['tsx'],
  'text/css': ['css'],
  'text/html': ['html'],
  'application/zip': ['zip']
};

export const FileUpload: React.FC<FileUploadProps> = ({
  onFileSelect,
  maxFiles = 5,
  maxSizeInMB = 10,
  acceptedTypes = Object.keys(ACCEPTED_FILE_TYPES),
  className = ''
}) => {
  const { user } = useAuth();
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [dragActive, setDragActive] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Generate file preview for images
  const generatePreview = useCallback((file: File): Promise<string | undefined> => {
    return new Promise((resolve) => {
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target?.result as string);
        reader.onerror = () => resolve(undefined);
        reader.readAsDataURL(file);
      } else {
        resolve(undefined);
      }
    });
  }, []);

  // Validate file type and size
  const validateFile = useCallback((file: File): { valid: boolean; error?: string } => {
    // Check file size
    if (file.size > maxSizeInMB * 1024 * 1024) {
      return { valid: false, error: `File too large. Max size: ${maxSizeInMB}MB` };
    }

    // Check file type
    const isValidType = acceptedTypes.some(type => {
      if (type.endsWith('/*')) {
        return file.type.startsWith(type.slice(0, -1));
      }
      return file.type === type;
    });

    if (!isValidType) {
      const extensions = acceptedTypes.flatMap(type => 
        ACCEPTED_FILE_TYPES[type as keyof typeof ACCEPTED_FILE_TYPES] || []
      );
      return { 
        valid: false, 
        error: `File type not supported. Accepted: ${extensions.join(', ')}` 
      };
    }

    return { valid: true };
  }, [acceptedTypes, maxSizeInMB]);

  // Process selected files
  const processFiles = useCallback(async (fileList: FileList) => {
    const newFiles: File[] = Array.from(fileList);
    
    // Check file limit
    if (files.length + newFiles.length > maxFiles) {
      alert(`Maximum ${maxFiles} files allowed`);
      return;
    }

    const processedFiles: UploadedFile[] = [];

    for (const file of newFiles) {
      const validation = validateFile(file);
      const preview = await generatePreview(file);

      processedFiles.push({
        file,
        id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        preview,
        status: validation.valid ? 'pending' : 'error',
        error: validation.error
      });
    }

    setFiles(prev => [...prev, ...processedFiles]);
    
    // Notify parent of valid files
    const validFiles = processedFiles
      .filter(f => f.status === 'pending')
      .map(f => f.file);
    
    if (validFiles.length > 0) {
      onFileSelect(validFiles);
    }
  }, [files.length, maxFiles, validateFile, generatePreview, onFileSelect]);

  // Handle drag events
  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const handleDragIn = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
      setDragActive(true);
    }
  }, []);

  const handleDragOut = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      processFiles(e.dataTransfer.files);
    }
  }, [processFiles]);

  // Handle file input change
  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      processFiles(e.target.files);
    }
  }, [processFiles]);

  // Remove file
  const removeFile = useCallback((fileId: string) => {
    setFiles(prev => prev.filter(f => f.id !== fileId));
  }, []);

  // Clear all files
  const clearFiles = useCallback(() => {
    setFiles([]);
  }, []);

  // Get file type icon
  const getFileIcon = (file: File) => {
    if (file.type.startsWith('image/')) return 'ðŸ–¼ï¸';
    if (file.type.includes('pdf')) return 'ðŸ“„';
    if (file.type.includes('word')) return 'ðŸ“';
    if (file.type.includes('excel') || file.type.includes('csv')) return 'ðŸ“Š';
    if (file.type.includes('zip')) return 'ðŸ—‚ï¸';
    if (file.type.includes('text')) return 'ðŸ“„';
    return 'ðŸ“Ž';
  };

  // Format file size
  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  if (!user) {
    return (
      <div className="p-4 text-center text-gray-500 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
        Please log in to upload files
      </div>
    );
  }

  return (
    <div className={`w-full ${className}`}>
      {/* Upload Area */}
      <div
        className={`
          relative border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer
          ${dragActive 
            ? 'border-blue-500 bg-blue-50' 
            : 'border-gray-300 hover:border-gray-400 bg-gray-50 hover:bg-gray-100'
          }
          ${files.length >= maxFiles ? 'opacity-50 cursor-not-allowed' : ''}
        `}
        onDragEnter={handleDragIn}
        onDragLeave={handleDragOut}
        onDragOver={handleDrag}
        onDrop={handleDrop}
        onClick={() => fileInputRef.current?.click()}
      >
        <input
          ref={fileInputRef}
          type="file"
          multiple
          accept={acceptedTypes.join(',')}
          onChange={handleFileInput}
          className="hidden"
          disabled={files.length >= maxFiles}
        />

        <div className="space-y-2">
          <div className="text-4xl">ðŸ“</div>
          <div className="text-lg font-medium text-gray-700">
            {dragActive ? 'Drop files here' : 'Click or drag files to upload'}
          </div>
          <div className="text-sm text-gray-500">
            Maximum {maxFiles} files, {maxSizeInMB}MB each
          </div>
          <div className="text-xs text-gray-400">
            Supported: Images, PDFs, Documents, Code files
          </div>
        </div>
      </div>

      {/* File List */}
      {files.length > 0 && (
        <div className="mt-4 space-y-2">
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-medium text-gray-700">
              Uploaded Files ({files.length}/{maxFiles})
            </h4>
            <button
              onClick={clearFiles}
              className="text-xs text-red-600 hover:text-red-800"
            >
              Clear All
            </button>
          </div>

          <div className="space-y-2 max-h-48 overflow-y-auto">
            {files.map((uploadedFile) => (
              <div
                key={uploadedFile.id}
                className={`
                  flex items-center space-x-3 p-3 rounded-lg border
                  ${uploadedFile.status === 'error' 
                    ? 'border-red-200 bg-red-50' 
                    : 'border-gray-200 bg-white'
                  }
                `}
              >
                {/* File Icon/Preview */}
                <div className="flex-shrink-0">
                  {uploadedFile.preview ? (
                    <img
                      src={uploadedFile.preview}
                      alt={uploadedFile.file.name}
                      className="w-10 h-10 object-cover rounded"
                    />
                  ) : (
                    <div className="w-10 h-10 flex items-center justify-center text-lg">
                      {getFileIcon(uploadedFile.file)}
                    </div>
                  )}
                </div>

                {/* File Info */}
                <div className="flex-1 min-w-0">
                  <div className="text-sm font-medium text-gray-900 truncate">
                    {uploadedFile.file.name}
                  </div>
                  <div className="text-xs text-gray-500">
                    {formatFileSize(uploadedFile.file.size)}
                  </div>
                  {uploadedFile.error && (
                    <div className="text-xs text-red-600 mt-1">
                      {uploadedFile.error}
                    </div>
                  )}
                </div>

                {/* Status & Actions */}
                <div className="flex items-center space-x-2">
                  {uploadedFile.status === 'pending' && (
                    <div className="text-xs text-green-600">âœ“ Ready</div>
                  )}
                  {uploadedFile.status === 'uploading' && (
                    <div className="text-xs text-blue-600">â†‘ Uploading...</div>
                  )}
                  {uploadedFile.status === 'success' && (
                    <div className="text-xs text-green-600">âœ“ Sent</div>
                  )}
                  {uploadedFile.status === 'error' && (
                    <div className="text-xs text-red-600">âœ— Error</div>
                  )}

                  <button
                    onClick={() => removeFile(uploadedFile.id)}
                    className="text-gray-400 hover:text-red-600 p-1"
                    title="Remove file"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\chat\MessageInput.tsx
================================================================================
// components/chat/MessageInput.tsx - Enhanced with file upload integration
import React, { useState, KeyboardEvent, useRef, useCallback } from 'react';
import { useChatStore } from '../../stores/chatStore';
import { useAuth } from '../../contexts/AuthContext';
import { FileUpload } from './FileUpload';

export const MessageInput: React.FC = () => {
    const [message, setMessage] = useState('');
    const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
    const [showFileUpload, setShowFileUpload] = useState(false);
    const [isExpanded, setIsExpanded] = useState(false);
    const textareaRef = useRef<HTMLTextAreaElement>(null);
    
    const { 
        sendMessage, 
        isLoading, 
        connectionStatus, 
        subscription,
        uploadingFiles,
        uploadProgress,
        error 
    } = useChatStore();
    const { user } = useAuth();

    // Auto-resize textarea
    const adjustTextareaHeight = useCallback(() => {
        const textarea = textareaRef.current;
        if (textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = `${Math.min(textarea.scrollHeight, 120)}px`;
        }
    }, []);

    // Handle message input change
    const handleMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        setMessage(e.target.value);
        adjustTextareaHeight();
    };

    // Handle file selection
    const handleFileSelect = useCallback((files: File[]) => {
        setSelectedFiles(prev => [...prev, ...files]);
        if (files.length > 0 && !isExpanded) {
            setIsExpanded(true);
        }
    }, [isExpanded]);

    // Remove selected file
    const removeSelectedFile = useCallback((index: number) => {
        setSelectedFiles(prev => prev.filter((_, i) => i !== index));
        if (selectedFiles.length === 1) {
            setIsExpanded(false);
            setShowFileUpload(false);
        }
    }, [selectedFiles.length]);

    // Handle form submission
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        
        if ((!message.trim() && selectedFiles.length === 0) || isLoading || !user) {
            return;
        }
        
        const messageToSend = message.trim();
        const filesToSend = [...selectedFiles];
        
        // Clear input immediately
        setMessage('');
        setSelectedFiles([]);
        setIsExpanded(false);
        setShowFileUpload(false);
        
        // Reset textarea height
        if (textareaRef.current) {
            textareaRef.current.style.height = 'auto';
        }
        
        try {
            await sendMessage(messageToSend || 'ðŸ“Ž Files attached', filesToSend);
        } catch (error) {
            console.error('Failed to send message:', error);
            // Restore message if there's an error and no files
            if (!filesToSend.length) {
                setMessage(messageToSend);
            }
        }
    };

    // Handle keyboard shortcuts
    const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSubmit(e as any);
        }
        
        if (e.key === 'Escape') {
            setIsExpanded(false);
            setShowFileUpload(false);
        }
    };

    // Check if user can send messages
    const canSendMessage = () => {
        if (!user || connectionStatus !== 'connected') return false;
        
        if (subscription && subscription.usage.maxMessages !== -1) {
            return subscription.usage.messagesThisMonth < subscription.usage.maxMessages;
        }
        
        return true;
    };

    // Check if user can upload files
    const canUploadFiles = () => {
        if (!user) return false;
        
        if (subscription && subscription.usage.maxFiles !== -1) {
            const remainingFiles = subscription.usage.maxFiles - subscription.usage.filesUploadedThisMonth;
            return remainingFiles > 0;
        }
        
        return true;
    };

    // Get placeholder text based on state
    const getPlaceholderText = () => {
        if (!user) return "Please log in to send messages...";
        if (connectionStatus !== 'connected') return "Connecting...";
        if (!canSendMessage()) return "Monthly message limit reached. Please upgrade your plan.";
        return "Type your message...";
    };

    // Format file size
    const formatFileSize = (bytes: number) => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    const isDisabled = isLoading || uploadingFiles || connectionStatus !== 'connected' || !user || !canSendMessage();

    return (
        <div className="bg-white border-t border-gray-200">
            {/* Error Banner */}
            {error && (
                <div className="px-6 py-2 bg-red-50 border-b border-red-200">
                    <div className="flex items-center text-sm text-red-700">
                        <svg className="w-4 h-4 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                        </svg>
                        {error}
                    </div>
                </div>
            )}

            {/* Usage Information */}
            {subscription && subscription.usage.maxMessages !== -1 && (
                <div className="px-6 py-2 bg-blue-50 border-b border-blue-200">
                    <div className="flex items-center justify-between text-sm">
                        <div className="text-blue-700">
                            Messages: {subscription.usage.messagesThisMonth}/{subscription.usage.maxMessages} this month
                        </div>
                        {subscription.usage.maxFiles !== -1 && (
                            <div className="text-blue-700">
                                Files: {subscription.usage.filesUploadedThisMonth}/{subscription.usage.maxFiles} this month
                            </div>
                        )}
                    </div>
                    {subscription.usage.messagesThisMonth >= subscription.usage.maxMessages * 0.8 && (
                        <div className="text-xs text-blue-600 mt-1">
                            {subscription.plan === 'free' 
                                ? 'Upgrade to Pro for unlimited messages' 
                                : 'You\'re approaching your monthly limit'
                            }
                        </div>
                    )}
                </div>
            )}

            {/* File Upload Area */}
            {(isExpanded || showFileUpload) && (
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                    <FileUpload
                        onFileSelect={handleFileSelect}
                        maxFiles={5}
                        maxSizeInMB={10}
                        className="mb-4"
                    />
                </div>
            )}

            {/* Selected Files Preview */}
            {selectedFiles.length > 0 && (
                <div className="px-6 py-3 border-b border-gray-200 bg-gray-50">
                    <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-700">
                            Selected Files ({selectedFiles.length})
                        </span>
                        <button
                            onClick={() => {
                                setSelectedFiles([]);
                                setIsExpanded(false);
                                setShowFileUpload(false);
                            }}
                            className="text-xs text-red-600 hover:text-red-800"
                        >
                            Clear All
                        </button>
                    </div>
                    
                    <div className="space-y-2">
                        {selectedFiles.map((file, index) => (
                            <div key={index} className="flex items-center justify-between p-2 bg-white rounded border">
                                <div className="flex items-center space-x-2">
                                    <span className="text-lg">ðŸ“Ž</span>
                                    <div>
                                        <div className="text-sm font-medium text-gray-900">{file.name}</div>
                                        <div className="text-xs text-gray-500">{formatFileSize(file.size)}</div>
                                    </div>
                                </div>
                                
                                <button
                                    onClick={() => removeSelectedFile(index)}
                                    className="text-gray-400 hover:text-red-600 p-1"
                                >
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* Upload Progress */}
            {uploadingFiles && Object.keys(uploadProgress).length > 0 && (
                <div className="px-6 py-3 border-b border-gray-200 bg-blue-50">
                    <div className="space-y-2">
                        {Object.entries(uploadProgress).map(([fileName, progress]) => (
                            <div key={fileName} className="space-y-1">
                                <div className="flex justify-between text-sm">
                                    <span className="text-blue-700">Uploading {fileName}</span>
                                    <span className="text-blue-600">{progress}%</span>
                                </div>
                                <div className="w-full bg-blue-200 rounded-full h-2">
                                    <div 
                                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                        style={{ width: `${progress}%` }}
                                    />
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* Main Input Area */}
            <div className="p-6">
                <form onSubmit={handleSubmit} className="flex items-end space-x-4">
                    {/* File Upload Button */}
                    <button
                        type="button"
                        onClick={() => {
                            setShowFileUpload(!showFileUpload);
                            setIsExpanded(true);
                        }}
                        disabled={!canUploadFiles() || uploadingFiles}
                        className={`
                            flex-shrink-0 p-2 rounded-lg transition-colors
                            ${canUploadFiles() && !uploadingFiles
                                ? 'text-gray-500 hover:text-blue-600 hover:bg-blue-50' 
                                : 'text-gray-300 cursor-not-allowed'
                            }
                        `}
                        title={canUploadFiles() ? "Attach files" : "File upload not available"}
                    >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                        </svg>
                    </button>

                    {/* Message Input */}
                    <div className="flex-1">
                        <textarea
                            ref={textareaRef}
                            value={message}
                            onChange={handleMessageChange}
                            onKeyDown={handleKeyDown}
                            placeholder={getPlaceholderText()}
                            disabled={isDisabled}
                            rows={1}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
                            style={{ minHeight: '48px', maxHeight: '120px' }}
                        />
                    </div>
                    
                    {/* Send Button */}
                    <button
                        type="submit"
                        disabled={isDisabled || (!message.trim() && selectedFiles.length === 0)}
                        className="flex-shrink-0 inline-flex items-center px-6 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                    >
                        {isLoading || uploadingFiles ? (
                            <>
                                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                {uploadingFiles ? 'Uploading...' : 'Sending...'}
                            </>
                        ) : (
                            <>
                                <svg className="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                                Send
                            </>
                        )}
                    </button>
                </form>
                
                <div className="mt-2 text-xs text-gray-500 text-center">
                    Press Enter to send â€¢ Shift+Enter for new line â€¢ Escape to collapse
                </div>
            </div>
        </div>
    );
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\chat\MessageList.tsx
================================================================================
// components/chat/MessageList.tsx - Enhanced with file previews and message actions
import React, { useEffect, useRef, useState } from 'react';
import { useChatStore, Message } from '../../stores/chatStore';
import { MessageActions } from '../subscription/FeatureGate';

interface MessageItemProps {
  message: Message;
  onRetry?: (messageId: string) => void;
}

const MessageItem: React.FC<MessageItemProps> = ({ message, onRetry }) => {
  const isUser = message.role === 'user';
  const [timeString, setTimeString] = useState('');
  const [showActions, setShowActions] = useState(false);
  const [imageLoadErrors, setImageLoadErrors] = useState<Set<string>>(new Set());

  // Fix hydration issue by formatting timestamp on client side only
  useEffect(() => {
    setTimeString(message.timestamp.toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    }));
  }, [message.timestamp]);

  // Handle image load errors
  const handleImageError = (fileId: string) => {
    setImageLoadErrors(prev => new Set([...prev, fileId]));
  };

  // Get file type icon
  const getFileIcon = (type: string) => {
    if (type.startsWith('image/')) return 'ðŸ–¼ï¸';
    if (type.includes('pdf')) return 'ðŸ“„';
    if (type.includes('word')) return 'ðŸ“';
    if (type.includes('excel') || type.includes('csv')) return 'ðŸ“Š';
    if (type.includes('zip')) return 'ðŸ—‚ï¸';
    if (type.includes('text')) return 'ðŸ“„';
    if (type.includes('json')) return 'ðŸ“‹';
    if (type.includes('javascript') || type.includes('typescript')) return 'âš™ï¸';
    return 'ðŸ“Ž';
  };

  // Format file size
  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Render file attachment
  const renderFileAttachment = (file: any, index: number) => {
    const isImage = file.type.startsWith('image/');
    const hasError = imageLoadErrors.has(file.id);

    return (
      <div key={index} className="mt-3 first:mt-2">
        <div className={`
          border rounded-lg overflow-hidden transition-all duration-200
          ${isUser ? 'border-blue-200 bg-blue-50' : 'border-gray-200 bg-gray-50'}
        `}>
          {/* Image Preview */}
          {isImage && file.preview && !hasError && (
            <div className="relative">
              <img
                src={file.preview}
                alt={file.name}
                className="w-full max-w-sm max-h-64 object-cover cursor-pointer hover:opacity-90 transition-opacity"
                onError={() => handleImageError(file.id)}
                onClick={() => window.open(file.url || file.preview, '_blank')}
              />
              <div className="absolute top-2 right-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                {formatFileSize(file.size)}
              </div>
            </div>
          )}

          {/* File Info */}
          <div className="p-3">
            <div className="flex items-center space-x-2">
              <span className="text-lg">{getFileIcon(file.type)}</span>
              <div className="flex-1 min-w-0">
                <div className={`text-sm font-medium truncate ${
                  isUser ? 'text-blue-900' : 'text-gray-900'
                }`}>
                  {file.name}
                </div>
                <div className={`text-xs ${
                  isUser ? 'text-blue-700' : 'text-gray-600'
                }`}>
                  {file.type} â€¢ {formatFileSize(file.size)}
                </div>
              </div>
              
              {/* File Actions */}
              <div className="flex items-center space-x-1">
                {file.url && (
                  <button
                    onClick={() => window.open(file.url, '_blank')}
                    className={`p-1 rounded hover:bg-opacity-20 ${
                      isUser 
                        ? 'text-blue-700 hover:bg-blue-600' 
                        : 'text-gray-600 hover:bg-gray-600'
                    }`}
                    title="Open file"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                  </button>
                )}
                
                <button
                  onClick={() => {
                    // Create download link
                    const link = document.createElement('a');
                    link.href = file.url || file.preview || '';
                    link.download = file.name;
                    link.click();
                  }}
                  className={`p-1 rounded hover:bg-opacity-20 ${
                    isUser 
                      ? 'text-blue-700 hover:bg-blue-600' 
                      : 'text-gray-600 hover:bg-gray-600'
                  }`}
                  title="Download file"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </button>
              </div>
            </div>

            {/* File Analysis Results */}
            {file.analysisResult && (
              <div className={`mt-2 p-2 rounded text-xs ${
                isUser ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-700'
              }`}>
                <div className="font-medium mb-1">AI Analysis:</div>
                <div className="whitespace-pre-wrap">{file.analysisResult.summary || 'Analysis completed'}</div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div 
      className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-6 group`}
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
    >
      <div className={`max-w-[80%] ${isUser ? 'order-1' : 'order-2'}`}>
        {/* Message Bubble */}
        <div className={`rounded-lg px-4 py-3 ${
          isUser
            ? 'bg-blue-600 text-white'
            : 'bg-gray-100 text-gray-800 border border-gray-200'
        }`}>
          {/* Message Content */}
          {message.content && (
            <div className="text-sm leading-relaxed whitespace-pre-wrap">
              {message.content}
            </div>
          )}

          {/* File Attachments */}
          {message.files && message.files.length > 0 && (
            <div className="space-y-2">
              {message.files.map((file, index) => renderFileAttachment(file, index))}
            </div>
          )}

          {/* AI Metadata */}
          {message.metadata && (
            <div className={`text-xs mt-2 opacity-75 ${
              isUser ? 'text-blue-100' : 'text-gray-500'
            }`}>
              {message.metadata.model && (
                <div>Model: {message.metadata.model}</div>
              )}
              {message.metadata.tokens && (
                <div>Tokens: {message.metadata.tokens}</div>
              )}
              {message.metadata.processingTime && (
                <div>Processing: {message.metadata.processingTime}ms</div>
              )}
            </div>
          )}

          {/* Message Status and Time */}
          <div className={`text-xs mt-2 flex items-center justify-between ${
            isUser ? 'text-blue-100' : 'text-gray-500'
          }`}>
            <span>{timeString}</span>
            <div className="flex items-center space-x-2">
              {message.status === 'sending' && (
                <div className="flex items-center space-x-1">
                  <svg className="animate-spin h-3 w-3" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <span>Sending...</span>
                </div>
              )}
              {message.status === 'error' && (
                <div className="flex items-center space-x-1">
                  <svg className="h-3 w-3 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <span className="text-red-500">Failed</span>
                  {onRetry && (
                    <button
                      onClick={() => onRetry(message.id)}
                      className="ml-1 text-red-500 hover:text-red-400 underline"
                    >
                      Retry
                    </button>
                  )}
                </div>
              )}
              {message.status === 'sent' && isUser && (
                <svg className="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              )}
            </div>
          </div>
        </div>

        {/* Message Actions */}
        {showActions && message.status === 'sent' && (
          <div className={`mt-2 transition-opacity duration-200 ${
            isUser ? 'text-right' : 'text-left'
          }`}>
            <MessageActions 
              messageId={message.id}
              content={message.content}
              className="inline-flex"
            />
          </div>
        )}
      </div>
    </div>
  );
};

// Main message list component
export const MessageList: React.FC = () => {
  const { messages, isLoading, retryMessage, searchMessages } = useChatStore();
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredMessages, setFilteredMessages] = useState<Message[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Handle search
  useEffect(() => {
    if (searchQuery.trim()) {
      setFilteredMessages(searchMessages(searchQuery));
    } else {
      setFilteredMessages([]);
    }
  }, [searchQuery, messages, searchMessages]);

  const displayMessages = filteredMessages.length > 0 ? filteredMessages : messages;

  return (
    <div className="flex-1 overflow-y-auto bg-gray-50">
      {/* Search Bar */}
      <div className="sticky top-0 z-10 bg-white border-b border-gray-200 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="relative">
            <input
              type="text"
              placeholder="Search messages..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <svg className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            {searchQuery && (
              <button
                onClick={() => setSearchQuery('')}
                className="absolute right-3 top-2.5 text-gray-400 hover:text-gray-600"
              >
                <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </div>
          
          {/* Search Results Info */}
          {searchQuery && (
            <div className="mt-2 text-sm text-gray-600">
              {filteredMessages.length > 0 
                ? `Found ${filteredMessages.length} message${filteredMessages.length === 1 ? '' : 's'}`
                : 'No messages found'
              }
            </div>
          )}
        </div>
      </div>

      {/* Messages */}
      <div className="p-6">
        <div className="max-w-4xl mx-auto">
          {displayMessages.length === 0 && !isLoading ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">ðŸ’¬</div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {searchQuery ? 'No messages found' : 'Start a conversation'}
              </h3>
              <p className="text-gray-600">
                {searchQuery 
                  ? 'Try different search terms or clear the search to see all messages.'
                  : 'Send a message or upload files to get started with your AI assistant.'
                }
              </p>
            </div>
          ) : (
            <>
              {displayMessages.map((message) => (
                <MessageItem 
                  key={message.id} 
                  message={message} 
                  onRetry={retryMessage}
                />
              ))}

              {/* Loading Indicator */}
              {isLoading && (
                <div className="flex justify-start mb-6">
                  <div className="bg-gray-100 border border-gray-200 rounded-lg px-4 py-3">
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin h-4 w-4 border-2 border-blue-600 border-t-transparent rounded-full"></div>
                      <span className="text-gray-600 text-sm">AI is thinking...</span>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}

          <div ref={messagesEndRef} />
        </div>
      </div>
    </div>
  );
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\events\EventCard.tsx
================================================================================
// components/events/EventCard.tsx - Fixed with proper user prop typing
import React from 'react';

// Define interfaces locally to avoid import issues
interface Event {
  $id: string;
  eventName: string;
  activityName?: string;
  activityId?: string;
  startDate: string;
  startTime?: string;
  endDate?: string;
  endTime?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  maxParticipants?: number;
  currentParticipants?: number;
  participants?: Array<{ 
    userId: string; 
    joinedAt: string; 
    name?: string; 
  }>;
  organizerId: string;
  organizer?: { name: string; avatar?: string; };
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  inclusive?: string[];
  isPrivate?: boolean;
  createdAt: string;
  updatedAt?: string;
  tags?: string[];
  requirements?: string[];
  equipment?: string[];
}

interface User {
  $id: string;
  name?: string;
  email: string;
  location?: {
    address: string;
    latitude: number;
    longitude: number;
  } | string;
  searchRadius?: number;
  disciplines?: string[];
  emailVerification?: boolean;
  phoneVerification?: boolean;
  createdAt?: string;
  avatar?: string;
  bio?: string;
}

interface EventCardProps {
  event: Event;
  onPress?: () => void;
  onJoin?: () => void;
  onLeave?: () => void;
  user?: User | null; // âœ… Properly typed user prop
  isGrid?: boolean;
  showActions?: boolean;
}

const EventCard: React.FC<EventCardProps> = ({ 
  event, 
  onPress, 
  onJoin, 
  onLeave, 
  user, 
  isGrid = false,
  showActions = true 
}) => {
  const isOrganizer = user && event.organizerId === user.$id;
  const isParticipant = user && event.participants?.some(p => p.userId === user.$id);
  const isFull = event.maxParticipants && event.currentParticipants && 
                 event.currentParticipants >= event.maxParticipants;

  // Get difficulty info
  const getDifficultyInfo = (difficulty?: string) => {
    switch (difficulty) {
      case 'beginner':
        return { emoji: 'ðŸŸ¢', color: 'text-green-600', bg: 'bg-green-100 dark:bg-green-900', label: 'Beginner' };
      case 'intermediate':
        return { emoji: 'ðŸŸ¡', color: 'text-yellow-600', bg: 'bg-yellow-100 dark:bg-yellow-900', label: 'Intermediate' };
      case 'advanced':
        return { emoji: 'ðŸ”´', color: 'text-red-600', bg: 'bg-red-100 dark:bg-red-900', label: 'Advanced' };
      case 'expert':
        return { emoji: 'ðŸŸ£', color: 'text-purple-600', bg: 'bg-purple-100 dark:bg-purple-900', label: 'Expert' };
      default:
        return { emoji: 'âšª', color: 'text-gray-600', bg: 'bg-gray-100 dark:bg-gray-900', label: 'Unknown' };
    }
  };

  const difficultyInfo = getDifficultyInfo(event.difficulty);

  // Format location
  const formatLocation = (location?: string | { address: string; latitude: number; longitude: number }) => {
    if (!location) return 'Location TBD';
    if (typeof location === 'string') return location;
    return location.address;
  };

  // Format date and time
  const formatDateTime = () => {
    try {
      const eventDate = new Date(event.startDate);
      const today = new Date();
      const tomorrow = new Date(today);
      tomorrow.setDate(today.getDate() + 1);

      let dateStr = '';
      if (eventDate.toDateString() === today.toDateString()) {
        dateStr = 'Today';
      } else if (eventDate.toDateString() === tomorrow.toDateString()) {
        dateStr = 'Tomorrow';
      } else {
        dateStr = eventDate.toLocaleDateString('en-US', { 
          weekday: isGrid ? 'short' : 'long', 
          month: 'short', 
          day: 'numeric' 
        });
      }

      const timeStr = event.startTime || 'All day';
      return `${dateStr} â€¢ ${timeStr}`;
    } catch {
      return 'Date TBD';
    }
  };

  // Handle join/leave
  const handleJoinLeave = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (isParticipant && onLeave) {
      onLeave();
    } else if (!isParticipant && onJoin) {
      onJoin();
    }
  };

  return (
    <div 
      className={`
        bg-white dark:bg-slate-800 rounded-lg border border-gray-200 dark:border-slate-700 
        hover:shadow-md transition-all duration-200 cursor-pointer
        ${isGrid ? 'p-4' : 'p-6'}
      `}
      onClick={onPress}
    >
      {/* Header */}
      <div className="flex items-start justify-between mb-3">
        <div className="flex-1">
          <h3 className={`font-semibold text-gray-900 dark:text-white line-clamp-2 ${isGrid ? 'text-base' : 'text-lg'}`}>
            {event.eventName}
          </h3>
          
          {event.activityName && (
            <p className={`text-emerald-600 dark:text-emerald-400 ${isGrid ? 'text-xs' : 'text-sm'} mt-1`}>
              ðŸƒ {event.activityName}
            </p>
          )}
          
          <p className={`text-gray-600 dark:text-gray-300 flex items-center mt-1 ${isGrid ? 'text-xs' : 'text-sm'}`}>
            ðŸ“… {formatDateTime()}
          </p>
          
          <p className={`text-gray-600 dark:text-gray-300 flex items-center mt-1 ${isGrid ? 'text-xs' : 'text-sm'}`}>
            ðŸ“ {formatLocation(event.location)}
          </p>
        </div>

        {/* Status indicators */}
        <div className="flex flex-col items-end space-y-1 ml-2">
          {event.isPrivate && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 dark:bg-slate-700 text-gray-600 dark:text-gray-300">
              ðŸ”’ Private
            </span>
          )}
          
          {isOrganizer && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-emerald-100 dark:bg-emerald-900 text-emerald-800 dark:text-emerald-200">
              ðŸ‘‘ Host
            </span>
          )}
          
          {isParticipant && !isOrganizer && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
              âœ“ Joined
            </span>
          )}
        </div>
      </div>

      {/* Description */}
      {event.description && !isGrid && (
        <p className="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
          {event.description}
        </p>
      )}

      {/* Event Details */}
      <div className={`flex items-center justify-between ${isGrid ? 'text-xs' : 'text-sm'}`}>
        <div className="flex items-center space-x-3 text-gray-600 dark:text-gray-300">
          {/* Difficulty */}
          <div className="flex items-center space-x-1">
            <span>{difficultyInfo.emoji}</span>
            {!isGrid && <span>{difficultyInfo.label}</span>}
          </div>

          {/* Participants */}
          <div className="flex items-center space-x-1">
            <span>ðŸ‘¥</span>
            <span>
              {event.currentParticipants || 0}
              {event.maxParticipants && `/${event.maxParticipants}`}
            </span>
          </div>

          {/* Full indicator */}
          {isFull && (
            <span className="text-red-600 dark:text-red-400 font-medium">
              Full
            </span>
          )}
        </div>

        {/* Organizer */}
        {event.organizer && !isGrid && (
          <div className="text-right">
            <p className="text-xs text-gray-500 dark:text-gray-400">
              by {event.organizer.name}
            </p>
          </div>
        )}
      </div>

      {/* Inclusive features */}
      {event.inclusive && event.inclusive.length > 0 && !isGrid && (
        <div className="flex flex-wrap gap-1 mt-3">
          {event.inclusive.slice(0, 3).map((feature: string, index: number) => {
            const getInclusiveEmoji = (feature: string) => {
              if (feature.includes('wheelchair')) return 'â™¿';
              if (feature.includes('beginner')) return 'ðŸ‘¶';
              if (feature.includes('family')) return 'ðŸ‘¨â€ðŸ‘©â€ðŸ‘§â€ðŸ‘¦';
              if (feature.includes('pet')) return 'ðŸ•';
              if (feature.includes('lgbtq')) return 'ðŸ³ï¸â€ðŸŒˆ';
              if (feature.includes('senior')) return 'ðŸ‘´';
              if (feature.includes('youth')) return 'ðŸ‘¦';
              return 'âœ¨';
            };

            return (
              <span
                key={index}
                className="inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200"
              >
                <span>{getInclusiveEmoji(feature)}</span>
                <span className="capitalize">{feature.replace('-', ' ')}</span>
              </span>
            );
          })}
          {event.inclusive.length > 3 && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 dark:bg-slate-700 text-gray-600 dark:text-gray-300">
              +{event.inclusive.length - 3} more
            </span>
          )}
        </div>
      )}

      {/* Action buttons */}
      {showActions && user && !isOrganizer && (
        <div className="flex items-center justify-between pt-3 mt-3 border-t border-gray-200 dark:border-slate-600">
          <span className={`text-gray-500 dark:text-gray-400 ${isGrid ? 'text-xs' : 'text-sm'}`}>
            {new Date(event.createdAt).toLocaleDateString()}
          </span>
          
          <button
            onClick={handleJoinLeave}
           disabled={!isParticipant && (isFull || false)}
            className={`
              px-4 py-2 rounded-lg transition-colors text-sm font-medium
              ${isParticipant 
                ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 hover:bg-red-200 dark:hover:bg-red-800' 
                : isFull
                ? 'bg-gray-100 dark:bg-slate-700 text-gray-400 dark:text-gray-500 cursor-not-allowed'
                : 'bg-emerald-600 hover:bg-emerald-700 text-white'
              }
            `}
          >
            {isParticipant ? 'Leave Event' : isFull ? 'Event Full' : 'Join Event'}
          </button>
        </div>
      )}

      {/* Organizer actions */}
      {showActions && isOrganizer && (
        <div className="flex items-center justify-between pt-3 mt-3 border-t border-gray-200 dark:border-slate-600">
          <span className={`text-gray-500 dark:text-gray-400 ${isGrid ? 'text-xs' : 'text-sm'}`}>
            You're hosting this event
          </span>
          
          <div className="flex space-x-2">
            <button
              onClick={(e) => {
                e.stopPropagation();
                // Handle edit
              }}
              className="px-3 py-1 text-sm text-emerald-600 dark:text-emerald-400 hover:bg-emerald-50 dark:hover:bg-emerald-900 rounded transition-colors"
            >
              Edit
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                // Handle manage participants
              }}
              className="px-3 py-1 text-sm text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900 rounded transition-colors"
            >
              Manage
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default EventCard;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\events\EventFilterModal.tsx
================================================================================
// EventFilterModal.tsx - Event filter modal component
import React from 'react';

interface EventFilterModalProps {
  isOpen: boolean;
  onClose: () => void;
  filters: any;
  onFiltersChange: (filters: any) => void;
  onApply: () => void;
}

const EventFilterModal: React.FC<EventFilterModalProps> = ({ 
  isOpen, 
  onClose, 
  onApply 
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-slate-800 rounded-lg w-full max-w-md">
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-slate-700">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Event Filters</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 p-1"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="p-4">
          <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
            Event filter options coming soon...
          </p>
          
          <div className="flex justify-end space-x-3">
            <button
              onClick={onClose}
              className="px-4 py-2 text-sm text-gray-700 dark:text-gray-200 border border-gray-300 dark:border-slate-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={() => { onApply(); onClose(); }}
              className="px-4 py-2 text-sm bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors"
            >
              Apply
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EventFilterModal;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\events\EventsCalander.tsx
================================================================================
// components/events/EventsCalendar.tsx - Calendar view for events
import React, { useState, useMemo } from 'react';

// Define interfaces locally
interface Event {
  $id: string;
  eventName: string;
  activityName?: string;
  startDate: string;
  startTime?: string;
  endDate?: string;
  endTime?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  maxParticipants?: number;
  currentParticipants?: number;
  organizerId: string;
  organizer?: { name: string; avatar?: string; };
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  inclusive?: string[];
  isPrivate?: boolean;
}

interface EventsCalendarProps {
  events: Event[];
  onEventSelect: (event: Event) => void;
}

const EventsCalendar: React.FC<EventsCalendarProps> = ({ events, onEventSelect }) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [viewMode, setViewMode] = useState<'month' | 'week' | 'day'>('month');

  // Calendar navigation
  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      if (direction === 'prev') {
        newDate.setMonth(newDate.getMonth() - 1);
      } else {
        newDate.setMonth(newDate.getMonth() + 1);
      }
      return newDate;
    });
  };

  const navigateWeek = (direction: 'prev' | 'next') => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      const days = direction === 'prev' ? -7 : 7;
      newDate.setDate(newDate.getDate() + days);
      return newDate;
    });
  };

  const navigateDay = (direction: 'prev' | 'next') => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      const days = direction === 'prev' ? -1 : 1;
      newDate.setDate(newDate.getDate() + days);
      return newDate;
    });
  };

  // Get events for a specific date
  const getEventsForDate = (date: Date): Event[] => {
    const dateString = date.toISOString().split('T')[0];
    return events.filter(event => {
      const eventDate = new Date(event.startDate).toISOString().split('T')[0];
      return eventDate === dateString;
    });
  };

  // Get difficulty color
  const getDifficultyColor = (difficulty?: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-500';
      case 'intermediate': return 'bg-yellow-500';
      case 'advanced': return 'bg-red-500';
      case 'expert': return 'bg-purple-500';
      default: return 'bg-emerald-500';
    }
  };

  // Generate calendar days for month view
  const monthDays = useMemo(() => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const days = [];
    for (let i = 0; i < 42; i++) {
      const day = new Date(startDate);
      day.setDate(startDate.getDate() + i);
      days.push({
        date: day,
        isCurrentMonth: day.getMonth() === month,
        isToday: day.toDateString() === new Date().toDateString(),
        events: getEventsForDate(day)
      });
    }
    
    return days;
  }, [currentDate, events]);

  // Generate week days
  const weekDays = useMemo(() => {
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
    
    const days = [];
    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek);
      day.setDate(startOfWeek.getDate() + i);
      days.push({
        date: day,
        isToday: day.toDateString() === new Date().toDateString(),
        events: getEventsForDate(day)
      });
    }
    
    return days;
  }, [currentDate, events]);

  // Month view component
  const MonthView = () => (
    <div className="grid grid-cols-7 gap-px bg-gray-200 dark:bg-slate-600">
      {/* Day headers */}
      {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
        <div key={day} className="bg-gray-50 dark:bg-slate-700 px-2 py-3 text-center">
          <span className="text-sm font-medium text-gray-900 dark:text-white">
            {day}
          </span>
        </div>
      ))}
      
      {/* Calendar days */}
      {monthDays.map((day, index) => (
        <div
          key={index}
          className={`
            bg-white dark:bg-slate-800 min-h-[120px] p-2 relative
            ${!day.isCurrentMonth ? 'opacity-40' : ''}
            ${day.isToday ? 'ring-2 ring-emerald-500' : ''}
          `}
        >
          <div className={`
            text-sm font-medium mb-1
            ${day.isToday ? 'text-emerald-600 dark:text-emerald-400' : 'text-gray-900 dark:text-white'}
          `}>
            {day.date.getDate()}
          </div>
          
          {/* Events for this day */}
          <div className="space-y-1">
            {day.events.slice(0, 3).map((event, eventIndex) => (
              <button
                key={eventIndex}
                onClick={() => onEventSelect(event)}
                className={`
                  w-full text-left px-2 py-1 rounded text-xs text-white truncate
                  ${getDifficultyColor(event.difficulty)}
                  hover:opacity-80 transition-opacity
                `}
                title={`${event.eventName} - ${event.startTime || 'All day'}`}
              >
                {event.eventName}
              </button>
            ))}
            
            {day.events.length > 3 && (
              <div className="text-xs text-gray-500 dark:text-gray-400 px-2">
                +{day.events.length - 3} more
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  );

  // Week view component
  const WeekView = () => (
    <div className="grid grid-cols-7 gap-px bg-gray-200 dark:bg-slate-600">
      {weekDays.map((day, index) => (
        <div key={index} className="bg-white dark:bg-slate-800 min-h-[400px] p-3">
          <div className={`
            text-center mb-3 pb-2 border-b border-gray-200 dark:border-slate-600
            ${day.isToday ? 'text-emerald-600 dark:text-emerald-400' : 'text-gray-900 dark:text-white'}
          `}>
            <div className="text-xs font-medium">
              {day.date.toLocaleDateString('en-US', { weekday: 'short' })}
            </div>
            <div className={`
              text-lg font-bold mt-1
              ${day.isToday ? 'bg-emerald-600 text-white rounded-full w-8 h-8 flex items-center justify-center mx-auto' : ''}
            `}>
              {day.date.getDate()}
            </div>
          </div>
          
          <div className="space-y-2">
            {day.events.map((event, eventIndex) => (
              <button
                key={eventIndex}
                onClick={() => onEventSelect(event)}
                className={`
                  w-full text-left p-2 rounded text-xs text-white
                  ${getDifficultyColor(event.difficulty)}
                  hover:opacity-80 transition-opacity
                `}
              >
                <div className="font-medium truncate">{event.eventName}</div>
                <div className="opacity-80 mt-1">
                  {event.startTime || 'All day'}
                </div>
              </button>
            ))}
          </div>
        </div>
      ))}
    </div>
  );

  // Day view component
  const DayView = () => {
    const todayEvents = getEventsForDate(currentDate);
    
    return (
      <div className="bg-white dark:bg-slate-800 rounded-lg p-6">
        <div className="text-center mb-6">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
            {currentDate.toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </h3>
        </div>
        
        {todayEvents.length > 0 ? (
          <div className="space-y-4">
            {todayEvents.map((event) => (
              <button
                key={event.$id}
                onClick={() => onEventSelect(event)}
                className="w-full text-left p-4 border border-gray-200 dark:border-slate-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h4 className="font-semibold text-gray-900 dark:text-white mb-1">
                      {event.eventName}
                    </h4>
                    <p className="text-sm text-gray-600 dark:text-gray-300 mb-2">
                      {event.startTime || 'All day'}
                      {event.endTime && ` - ${event.endTime}`}
                    </p>
                    {event.description && (
                      <p className="text-sm text-gray-500 dark:text-gray-400 line-clamp-2">
                        {event.description}
                      </p>
                    )}
                  </div>
                  
                  <div className="ml-4 flex flex-col items-end space-y-2">
                    {event.difficulty && (
                      <span className={`
                        px-2 py-1 rounded-full text-xs text-white
                        ${getDifficultyColor(event.difficulty)}
                      `}>
                        {event.difficulty}
                      </span>
                    )}
                    
                    {event.currentParticipants !== undefined && event.maxParticipants && (
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {event.currentParticipants}/{event.maxParticipants} participants
                      </span>
                    )}
                  </div>
                </div>
              </button>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <div className="text-4xl mb-2">ðŸ“…</div>
            <p className="text-gray-500 dark:text-gray-400">
              No events scheduled for this day
            </p>
          </div>
        )}
      </div>
    );
  };

  const navigate = (direction: 'prev' | 'next') => {
    switch (viewMode) {
      case 'month':
        navigateMonth(direction);
        break;
      case 'week':
        navigateWeek(direction);
        break;
      case 'day':
        navigateDay(direction);
        break;
    }
  };

  return (
    <div className="space-y-4">
      {/* Calendar Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
            {viewMode === 'month' && currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
            {viewMode === 'week' && `Week of ${currentDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`}
            {viewMode === 'day' && currentDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
          </h2>
          
          <div className="flex items-center space-x-1">
            <button
              onClick={() => navigate('prev')}
              className="p-1 hover:bg-gray-100 dark:hover:bg-slate-700 rounded transition-colors"
            >
              <svg className="h-5 w-5 text-gray-600 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            
            <button
              onClick={() => setCurrentDate(new Date())}
              className="px-3 py-1 text-sm bg-emerald-600 hover:bg-emerald-700 text-white rounded transition-colors"
            >
              Today
            </button>
            
            <button
              onClick={() => navigate('next')}
              className="p-1 hover:bg-gray-100 dark:hover:bg-slate-700 rounded transition-colors"
            >
              <svg className="h-5 w-5 text-gray-600 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </div>

        {/* View Mode Toggle */}
        <div className="flex space-x-1 bg-gray-100 dark:bg-slate-800 p-1 rounded-lg">
          <button
            onClick={() => setViewMode('month')}
            className={`
              px-3 py-1 rounded text-sm transition-colors
              ${viewMode === 'month'
                ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                : 'text-gray-600 dark:text-gray-300'
              }
            `}
          >
            Month
          </button>
          <button
            onClick={() => setViewMode('week')}
            className={`
              px-3 py-1 rounded text-sm transition-colors
              ${viewMode === 'week'
                ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                : 'text-gray-600 dark:text-gray-300'
              }
            `}
          >
            Week
          </button>
          <button
            onClick={() => setViewMode('day')}
            className={`
              px-3 py-1 rounded text-sm transition-colors
              ${viewMode === 'day'
                ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                : 'text-gray-600 dark:text-gray-300'
              }
            `}
          >
            Day
          </button>
        </div>
      </div>

      {/* Calendar Content */}
      <div className="bg-white dark:bg-slate-800 rounded-lg border border-gray-200 dark:border-slate-700 overflow-hidden">
        {viewMode === 'month' && <MonthView />}
        {viewMode === 'week' && <WeekView />}
        {viewMode === 'day' && <DayView />}
      </div>

      {/* Legend */}
      <div className="flex items-center justify-center space-x-6 text-sm text-gray-600 dark:text-gray-300">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-green-500 rounded"></div>
          <span>Beginner</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-yellow-500 rounded"></div>
          <span>Intermediate</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-red-500 rounded"></div>
          <span>Advanced</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-purple-500 rounded"></div>
          <span>Expert</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-emerald-500 rounded"></div>
          <span>Other</span>
        </div>
      </div>

      {/* Events Summary */}
      {events.length > 0 && (
        <div className="text-center text-sm text-gray-600 dark:text-gray-300">
          Showing {events.length} event{events.length !== 1 ? 's' : ''} 
          {viewMode === 'month' && ` in ${currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`}
          {viewMode === 'week' && ` this week`}
          {viewMode === 'day' && ` today`}
        </div>
      )}
    </div>
  );
};

export default EventsCalendar;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\layout\MainLayout.tsx
================================================================================
// components/layout/MainLayout.tsx - Improved responsive layout
import React from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '@/contexts/AuthContext';
import Navigation from './Navigation';
import MobileNavigation from './MobileNavigation';

interface MainLayoutProps {
  children: React.ReactNode;
}

const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
  const { user } = useAuth();
  const router = useRouter();

  // Don't show navigation on login/auth pages
  const hideNavigation = router.pathname.includes('/auth');

  if (hideNavigation) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-slate-900">
        {children}
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-slate-900">
      {/* Desktop Navigation - Only show on large screens */}
      <div className="hidden lg:flex">
        <Navigation />
      </div>
      
      {/* Mobile Navigation - Only show on small screens */}
      <div className="lg:hidden">
        <MobileNavigation />
      </div>
      
      {/* Main Content */}
      <main className="lg:ml-64">
        {/* Content wrapper with proper padding */}
        <div className="min-h-screen p-4 pb-24 lg:pb-6 lg:p-6">
          <div className="max-w-6xl mx-auto">
            {children}
          </div>
        </div>
      </main>
    </div>
  );
};

export default MainLayout;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\layout\MobileNavigation.tsx
================================================================================
// components/layout/MobileNavigation.tsx - Simplified and properly sized
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

const MobileNavigation = () => {
  const router = useRouter();

  const navigationItems = [
    { name: 'Feed', href: '/feed', icon: 'ðŸ ' },
    { name: 'Activities', href: '/activities', icon: 'ðŸ—ºï¸' },
    { name: 'Events', href: '/events', icon: 'ðŸ“…' },
    { name: 'Chat', href: '/chat', icon: 'ðŸ’¬' },
    { name: 'Profile', href: '/profile', icon: 'ðŸ‘¤' }
  ];

  const isActiveRoute = (href: string) => {
    if (href === '/feed') {
      return router.pathname === '/feed' || router.pathname === '/';
    }
    return router.pathname.startsWith(href);
  };

  return (
    <>
      {/* Mobile Header */}
      <header className="bg-white dark:bg-slate-800 border-b border-gray-200 dark:border-slate-700 px-4 py-3">
        <div className="flex items-center justify-center">
          <div className="flex items-center space-x-2">
            <div className="w-6 h-6 bg-emerald-600 rounded flex items-center justify-center">
              <span className="text-white font-bold text-xs">A1</span>
            </div>
            <span className="text-lg font-bold text-emerald-600 dark:text-emerald-400">
              AdventureOne
            </span>
          </div>
        </div>
      </header>

      {/* Bottom Tab Navigation */}
      <div className="fixed bottom-0 left-0 right-0 z-50 bg-white dark:bg-slate-800 border-t border-gray-200 dark:border-slate-700 safe-area-bottom">
        <div className="flex items-center justify-around px-2 py-2">
          {navigationItems.map((item) => {
            const isActive = isActiveRoute(item.href);
            
            return (
              <Link
                key={item.name}
                href={item.href}
                className={`
                  flex flex-col items-center justify-center px-2 py-1 rounded-lg transition-all duration-200 min-w-[56px]
                  ${isActive
                    ? 'text-emerald-600 dark:text-emerald-400'
                    : 'text-gray-500 dark:text-gray-400'
                  }
                `}
              >
                <span className="text-lg mb-0.5">{item.icon}</span>
                <span className="text-xs font-medium">{item.name}</span>
                {isActive && (
                  <div className="w-1 h-1 bg-emerald-600 dark:bg-emerald-400 rounded-full mt-0.5" />
                )}
              </Link>
            );
          })}
        </div>
      </div>
    </>
  );
};

export default MobileNavigation;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\layout\Navigation.tsx
================================================================================
// components/layout/Navigation.tsx - Simplified desktop nav
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useAuth } from '@/contexts/AuthContext';

const Navigation = () => {
  const { user, logout } = useAuth();
  const router = useRouter();

  const navigationItems = [
    { name: 'Feed', href: '/feed', icon: 'ðŸ ' },
    { name: 'Activities', href: '/activities', icon: 'ðŸ—ºï¸' },
    { name: 'Events', href: '/events', icon: 'ðŸ“…' },
    { name: 'Chat', href: '/chat', icon: 'ðŸ’¬' },
    { name: 'Profile', href: '/profile', icon: 'ðŸ‘¤' }
  ];

  const isActiveRoute = (href: string) => {
    if (href === '/feed') {
      return router.pathname === '/feed' || router.pathname === '/';
    }
    return router.pathname.startsWith(href);
  };

  return (
    <div className="fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-slate-800 border-r border-gray-200 dark:border-slate-700">
      {/* Logo Section */}
      <div className="flex items-center justify-center h-16 px-4 border-b border-gray-200 dark:border-slate-700">
        <div className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-emerald-600 rounded-lg flex items-center justify-center">
            <span className="text-white font-bold text-lg">A1</span>
          </div>
          <span className="text-lg font-bold text-emerald-600 dark:text-emerald-400">
            AdventureOne
          </span>
        </div>
      </div>

      {/* User Info */}
      {user && (
        <div className="p-4 border-b border-gray-200 dark:border-slate-700">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-emerald-100 dark:bg-emerald-900 rounded-full flex items-center justify-center">
              <span className="text-emerald-600 dark:text-emerald-400 font-semibold text-sm">
                {user.name?.charAt(0) || user.email?.charAt(0) || '?'}
              </span>
            </div>
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                {user.name || 'User'}
              </p>
              <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                {user.email}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Navigation Links */}
      <nav className="flex-1 px-3 py-4 space-y-1">
        {navigationItems.map((item) => {
          const isActive = isActiveRoute(item.href);
          
          return (
            <Link
              key={item.name}
              href={item.href}
              className={`
                group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors
                ${isActive
                  ? 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400'
                  : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-700 hover:text-gray-900 dark:hover:text-white'
                }
              `}
            >
              <span className="mr-3 text-lg">{item.icon}</span>
              {item.name}
            </Link>
          );
        })}
      </nav>

      {/* Bottom Actions */}
      <div className="px-3 py-4 border-t border-gray-200 dark:border-slate-700">
        <button
          onClick={logout}
          className="w-full group flex items-center px-3 py-2 text-sm font-medium rounded-lg text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-700 hover:text-gray-900 dark:hover:text-white transition-colors"
        >
          <span className="mr-3 text-lg">ðŸšª</span>
          Sign Out
        </button>
      </div>
    </div>
  );
};

export default Navigation;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\profile\UserStatsCard.tsx
================================================================================
// components/profile/UserStatsCard.tsx - Fixed typing errors
import React from 'react';

// Define interfaces locally to avoid import issues
interface User {
  $id: string;
  name?: string;
  email: string;
  location?: {
    address: string;
    latitude: number;
    longitude: number;
  } | string;
  searchRadius?: number;
  disciplines?: string[];
  emailVerification?: boolean;
  phoneVerification?: boolean;
  createdAt?: string;
  avatar?: string;
  bio?: string;
  stats?: {
    activitiesCreated: number;
    eventsHosted: number;
    eventsJoined: number;
  };
}

interface UserStatsCardProps {
  user: User;
  stats?: {
    activitiesCreated: number;
    eventsHosted: number;
    eventsJoined: number;
    totalParticipants: number;
  };
}

const UserStatsCard: React.FC<UserStatsCardProps> = ({ user, stats }) => {
  const defaultStats = {
    activitiesCreated: 0,
    eventsHosted: 0,
    eventsJoined: 0,
    totalParticipants: 0,
    ...stats
  };

  // Fix: Properly type the disciplines array
  const userDisciplines: string[] = user.disciplines || [];

  return (
    <div className="bg-white dark:bg-slate-800 rounded-lg border border-gray-200 dark:border-slate-700 p-6">
      {/* User Info Section */}
      <div className="flex items-center space-x-4 mb-6">
        {/* Avatar */}
        <div className="w-16 h-16 bg-emerald-100 dark:bg-emerald-900 rounded-full flex items-center justify-center">
          {user.avatar ? (
            <img 
              src={user.avatar} 
              alt={user.name || 'User'} 
              className="w-16 h-16 rounded-full object-cover"
            />
          ) : (
            <span className="text-2xl font-semibold text-emerald-600 dark:text-emerald-400">
              {(user.name || user.email || 'U').charAt(0).toUpperCase()}
            </span>
          )}
        </div>

        {/* User Details */}
        <div className="flex-1">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
            {user.name || 'Adventure Enthusiast'}
          </h2>
          <p className="text-gray-600 dark:text-gray-300">{user.email}</p>
          {user.location && (
            <p className="text-sm text-gray-500 dark:text-gray-400 flex items-center mt-1">
              ðŸ“ {typeof user.location === 'string' ? user.location : user.location.address}
            </p>
          )}
        </div>

        {/* Verification Badges */}
        <div className="flex flex-col space-y-1">
          {user.emailVerification && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200">
              âœ“ Email
            </span>
          )}
          {user.phoneVerification && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
              âœ“ Phone
            </span>
          )}
        </div>
      </div>

      {/* Bio Section */}
      {user.bio && (
        <div className="mb-6">
          <p className="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
            {user.bio}
          </p>
        </div>
      )}

      {/* Disciplines/Interests - Fixed typing */}
      {userDisciplines.length > 0 && (
        <div className="mb-6">
          <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-2">
            Interests
          </h3>
          <div className="flex flex-wrap gap-2">
            {userDisciplines.slice(0, 6).map((discipline: string, index: number) => (
              <span
                key={index}
                className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-emerald-100 dark:bg-emerald-900 text-emerald-800 dark:text-emerald-200"
              >
                {discipline}
              </span>
            ))}
            {userDisciplines.length > 6 && (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-gray-100 dark:bg-slate-700 text-gray-600 dark:text-gray-300">
                +{userDisciplines.length - 6} more
              </span>
            )}
          </div>
        </div>
      )}

      {/* Statistics Grid */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="text-center p-3 bg-gray-50 dark:bg-slate-700 rounded-lg">
          <div className="text-2xl font-bold text-emerald-600 dark:text-emerald-400">
            {defaultStats.activitiesCreated}
          </div>
          <div className="text-xs text-gray-600 dark:text-gray-300 mt-1">
            Activities Created
          </div>
        </div>

        <div className="text-center p-3 bg-gray-50 dark:bg-slate-700 rounded-lg">
          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
            {defaultStats.eventsHosted}
          </div>
          <div className="text-xs text-gray-600 dark:text-gray-300 mt-1">
            Events Hosted
          </div>
        </div>

        <div className="text-center p-3 bg-gray-50 dark:bg-slate-700 rounded-lg">
          <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
            {defaultStats.eventsJoined}
          </div>
          <div className="text-xs text-gray-600 dark:text-gray-300 mt-1">
            Events Joined
          </div>
        </div>

        <div className="text-center p-3 bg-gray-50 dark:bg-slate-700 rounded-lg">
          <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">
            {defaultStats.totalParticipants}
          </div>
          <div className="text-xs text-gray-600 dark:text-gray-300 mt-1">
            Total Participants
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex space-x-3 mt-6">
        <button className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg transition-colors text-sm font-medium">
          Edit Profile
        </button>
        <button className="flex-1 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-600 px-4 py-2 rounded-lg transition-colors text-sm font-medium">
          Settings
        </button>
      </div>

      {/* Quick Stats Bar */}
      <div className="mt-6 pt-4 border-t border-gray-200 dark:border-slate-600">
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-600 dark:text-gray-300">Adventure Level</span>
          <div className="flex items-center space-x-2">
            <div className="w-24 bg-gray-200 dark:bg-slate-600 rounded-full h-2">
              <div 
                className="bg-emerald-600 h-2 rounded-full transition-all duration-300"
                style={{ 
                  width: `${Math.min(100, (defaultStats.activitiesCreated + defaultStats.eventsHosted) * 10)}%` 
                }}
              ></div>
            </div>
            <span className="text-emerald-600 dark:text-emerald-400 font-medium">
              {defaultStats.activitiesCreated + defaultStats.eventsHosted < 3 ? 'Beginner' :
               defaultStats.activitiesCreated + defaultStats.eventsHosted < 10 ? 'Explorer' :
               defaultStats.activitiesCreated + defaultStats.eventsHosted < 25 ? 'Adventurer' : 'Expert'}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserStatsCard;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\components\subscription\FeatureGate.tsx
================================================================================
// components/subscription/FeatureGate.tsx - Feature access control with upgrade prompts
import React from 'react';
import { useChatStore } from '../../stores/chatStore';

interface FeatureGateProps {
  feature: 'messages' | 'files' | 'export' | 'search';
  children: React.ReactNode;
  fallback?: React.ReactNode;
  showUpgradePrompt?: boolean;
}

export const FeatureGate: React.FC<FeatureGateProps> = ({
  feature,
  children,
  fallback,
  showUpgradePrompt = true
}) => {
  const { subscription } = useChatStore();

  const hasAccess = () => {
    if (!subscription) return false;

    switch (feature) {
      case 'messages':
        return subscription.usage.maxMessages === -1 || 
               subscription.usage.messagesThisMonth < subscription.usage.maxMessages;
      
      case 'files':
        return subscription.usage.maxFiles === -1 || 
               subscription.usage.filesUploadedThisMonth < subscription.usage.maxFiles;
      
      case 'export':
      case 'search':
        return subscription.plan !== 'free';
      
      default:
        return true;
    }
  };

  if (hasAccess()) {
    return <>{children}</>;
  }

  if (fallback) {
    return <>{fallback}</>;
  }

  if (!showUpgradePrompt) {
    return null;
  }

  return <UpgradePrompt feature={feature} />;
};

// Individual upgrade prompt component
const UpgradePrompt: React.FC<{ feature: string }> = ({ feature }) => {
  const getFeatureMessage = () => {
    switch (feature) {
      case 'messages':
        return 'You\'ve reached your monthly message limit. Upgrade to Pro for unlimited messages.';
      case 'files':
        return 'You\'ve reached your monthly file upload limit. Upgrade to Pro for more uploads.';
      case 'export':
        return 'Export conversations is available in Pro plans.';
      case 'search':
        return 'Message search is available in Pro plans.';
      default:
        return 'This feature requires a Pro subscription.';
    }
  };

  return (
    <div className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg">
      <div className="flex items-center space-x-3">
        <div className="text-2xl">â­</div>
        <div className="flex-1">
          <p className="text-sm text-gray-700 mb-2">{getFeatureMessage()}</p>
          <button className="text-sm bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
            Upgrade Now
          </button>
        </div>
      </div>
    </div>
  );
};

// Usage indicator component
export const UsageIndicator: React.FC = () => {
  const { subscription } = useChatStore();

  if (!subscription || subscription.plan === 'pro_plus') {
    return null;
  }

  const getUsageColor = (used: number, max: number) => {
    if (max === -1) return 'text-green-600';
    const percentage = (used / max) * 100;
    if (percentage >= 90) return 'text-red-600';
    if (percentage >= 70) return 'text-yellow-600';
    return 'text-green-600';
  };

  const formatUsage = (used: number, max: number) => {
    if (max === -1) return 'Unlimited';
    return `${used}/${max}`;
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4 mb-4">
      <h3 className="text-sm font-medium text-gray-900 mb-3">Usage This Month</h3>
      
      <div className="space-y-3">
        {/* Messages Usage */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">Messages</span>
          <span className={`text-sm font-medium ${getUsageColor(
            subscription.usage.messagesThisMonth, 
            subscription.usage.maxMessages
          )}`}>
            {formatUsage(subscription.usage.messagesThisMonth, subscription.usage.maxMessages)}
          </span>
        </div>

        {/* Messages Progress Bar */}
        {subscription.usage.maxMessages !== -1 && (
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className={`h-2 rounded-full transition-all duration-300 ${
                subscription.usage.messagesThisMonth >= subscription.usage.maxMessages * 0.9 
                  ? 'bg-red-500' 
                  : subscription.usage.messagesThisMonth >= subscription.usage.maxMessages * 0.7
                  ? 'bg-yellow-500'
                  : 'bg-green-500'
              }`}
              style={{ 
                width: `${Math.min(
                  (subscription.usage.messagesThisMonth / subscription.usage.maxMessages) * 100, 
                  100
                )}%` 
              }}
            />
          </div>
        )}

        {/* Files Usage */}
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600">File Uploads</span>
          <span className={`text-sm font-medium ${getUsageColor(
            subscription.usage.filesUploadedThisMonth, 
            subscription.usage.maxFiles
          )}`}>
            {formatUsage(subscription.usage.filesUploadedThisMonth, subscription.usage.maxFiles)}
          </span>
        </div>

        {/* Files Progress Bar */}
        {subscription.usage.maxFiles !== -1 && (
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className={`h-2 rounded-full transition-all duration-300 ${
                subscription.usage.filesUploadedThisMonth >= subscription.usage.maxFiles * 0.9 
                  ? 'bg-red-500' 
                  : subscription.usage.filesUploadedThisMonth >= subscription.usage.maxFiles * 0.7
                  ? 'bg-yellow-500'
                  : 'bg-green-500'
              }`}
              style={{ 
                width: `${Math.min(
                  (subscription.usage.filesUploadedThisMonth / subscription.usage.maxFiles) * 100, 
                  100
                )}%` 
              }}
            />
          </div>
        )}

        {/* Current Plan */}
        <div className="pt-2 border-t border-gray-200">
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-600">Current Plan</span>
            <span className="text-sm font-medium text-blue-600 capitalize">
              {subscription.plan.replace('_', ' ')}
            </span>
          </div>
        </div>
      </div>

      {/* Upgrade CTA */}
      {subscription.plan === 'free' && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <button className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white text-sm font-medium py-2 px-4 rounded-md hover:from-blue-700 hover:to-purple-700 transition-all duration-200">
            Upgrade to Pro for Unlimited Access
          </button>
        </div>
      )}
    </div>
  );
};

// Plan comparison modal
interface PlanComparisonModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSelectPlan: (plan: 'pro' | 'pro_plus') => void;
}

export const PlanComparisonModal: React.FC<PlanComparisonModalProps> = ({
  isOpen,
  onClose,
  onSelectPlan
}) => {
  if (!isOpen) return null;

  const plans = [
    {
      id: 'free' as const,
      name: 'Free',
      price: '$0',
      description: 'Perfect for getting started',
      features: [
        '50 messages per month',
        '5 file uploads per month',
        'Basic chat features',
        'Community support'
      ],
      limitations: [
        'Limited messages',
        'Limited file uploads',
        'No export feature',
        'No message search'
      ],
      current: true
    },
    {
      id: 'pro' as const,
      name: 'Pro',
      price: '$4',
      description: 'Unlimited conversations and uploads',
      features: [
        'Unlimited messages',
        '50 file uploads per month',
        'Export conversations',
        'Message search',
        'Priority support',
        'Advanced file analysis'
      ],
      popular: true
    },
    {
      id: 'pro_plus' as const,
      name: 'Pro Plus',
      price: '$8',
      description: 'Everything you need for professional use',
      features: [
        'Everything in Pro',
        'Unlimited file uploads',
        'Advanced AI models',
        'Priority processing',
        'Data export',
        'Custom integrations'
      ]
    }
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Choose Your Plan</h2>
              <p className="text-gray-600 mt-1">Upgrade to unlock unlimited access and advanced features</p>
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 p-2"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Plans Grid */}
        <div className="p-6">
          <div className="grid md:grid-cols-3 gap-6">
            {plans.map((plan) => (
              <div
                key={plan.id}
                className={`
                  relative rounded-lg border-2 p-6 transition-all duration-200
                  ${plan.popular 
                    ? 'border-blue-500 shadow-lg scale-105' 
                    : 'border-gray-200 hover:border-gray-300'
                  }
                  ${plan.current ? 'bg-gray-50' : 'bg-white hover:shadow-md'}
                `}
              >
                {/* Popular Badge */}
                {plan.popular && (
                  <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                    <span className="bg-blue-500 text-white text-xs font-medium px-3 py-1 rounded-full">
                      Most Popular
                    </span>
                  </div>
                )}

                {/* Current Plan Badge */}
                {plan.current && (
                  <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                    <span className="bg-gray-500 text-white text-xs font-medium px-3 py-1 rounded-full">
                      Current Plan
                    </span>
                  </div>
                )}

                {/* Plan Header */}
                <div className="text-center mb-6">
                  <h3 className="text-xl font-bold text-gray-900">{plan.name}</h3>
                  <div className="mt-2">
                    <span className="text-3xl font-bold text-gray-900">{plan.price}</span>
                    {plan.price !== '$0' && <span className="text-gray-600">/month</span>}
                  </div>
                  <p className="text-gray-600 text-sm mt-2">{plan.description}</p>
                </div>

                {/* Features List */}
                <div className="space-y-3 mb-6">
                  {plan.features.map((feature, index) => (
                    <div key={index} className="flex items-center">
                      <svg className="w-4 h-4 text-green-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <span className="text-sm text-gray-700">{feature}</span>
                    </div>
                  ))}

                  {/* Limitations for free plan */}
                  {plan.limitations && (
                    <>
                      <div className="border-t border-gray-200 my-4"></div>
                      {plan.limitations.map((limitation, index) => (
                        <div key={index} className="flex items-center">
                          <svg className="w-4 h-4 text-gray-400 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                          <span className="text-sm text-gray-500">{limitation}</span>
                        </div>
                      ))}
                    </>
                  )}
                </div>

                {/* Action Button */}
                <div className="mt-auto">
                  {plan.current ? (
                    <button
                      disabled
                      className="w-full bg-gray-300 text-gray-500 py-2 px-4 rounded-md cursor-not-allowed"
                    >
                      Current Plan
                    </button>
                  ) : plan.id === 'free' ? (
                    <button
                      onClick={onClose}
                      className="w-full border border-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50"
                    >
                      Continue with Free
                    </button>
                  ) : (
                    <button
                      onClick={() => onSelectPlan(plan.id)}
                      className={`
                        w-full py-2 px-4 rounded-md font-medium transition-colors
                        ${plan.popular
                          ? 'bg-blue-600 text-white hover:bg-blue-700'
                          : 'bg-gray-900 text-white hover:bg-gray-800'
                        }
                      `}
                    >
                      Upgrade to {plan.name}
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>

          {/* Additional Info */}
          <div className="mt-8 text-center text-sm text-gray-600">
            <p>All plans include:</p>
            <div className="flex justify-center space-x-6 mt-2">
              <span>âœ“ Secure data encryption</span>
              <span>âœ“ 24/7 uptime</span>
              <span>âœ“ Regular updates</span>
            </div>
            <p className="mt-4 text-xs">
              Cancel anytime. No long-term commitments. Instant upgrades and downgrades.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Message actions component with subscription gates
interface MessageActionsProps {
  messageId: string;
  content: string;
  className?: string;
}

export const MessageActions: React.FC<MessageActionsProps> = ({
  messageId,
  content,
  className = ''
}) => {
  const { subscription, deleteMessage, retryMessage } = useChatStore();

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      // You could add a toast notification here
      console.log('Message copied to clipboard');
    } catch (error) {
      console.error('Failed to copy message:', error);
    }
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: 'AdventureOne Chat Message',
        text: content
      });
    } else {
      copyToClipboard(content);
    }
  };

  return (
    <div className={`flex items-center space-x-2 ${className}`}>
      {/* Copy Message */}
      <button
        onClick={() => copyToClipboard(content)}
        className="p-1 text-gray-400 hover:text-gray-600 rounded"
        title="Copy message"
      >
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
      </button>

      {/* Share Message */}
      <FeatureGate 
        feature="export" 
        showUpgradePrompt={false}
        fallback={
          <button
            disabled
            className="p-1 text-gray-300 cursor-not-allowed rounded"
            title="Share (Pro feature)"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
            </svg>
          </button>
        }
      >
        <button
          onClick={handleShare}
          className="p-1 text-gray-400 hover:text-gray-600 rounded"
          title="Share message"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
          </svg>
        </button>
      </FeatureGate>

      {/* Delete Message */}
      <button
        onClick={() => {
          if (confirm('Are you sure you want to delete this message?')) {
            deleteMessage(messageId);
          }
        }}
        className="p-1 text-gray-400 hover:text-red-600 rounded"
        title="Delete message"
      >
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
        </svg>
      </button>
    </div>
  );
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\api\hello.ts
================================================================================
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  name: string;
};

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>,
) {
  res.status(200).json({ name: "John Doe" });
}


================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\auth\login.tsx
================================================================================
import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '@/contexts/AuthContext';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      await login(email, password);
      router.push('/feed');
    } catch (error) {
      console.error('Login failed:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-slate-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <div className="flex justify-center">
            <div className="w-12 h-12 bg-emerald-600 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-xl">A1</span>
            </div>
          </div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
            Sign in to AdventureOne
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Welcome back to your outdoor community
          </p>
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none"
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none"
                placeholder="Enter your password"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:opacity-50 transition-colors"
            >
              {loading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
          
          <div className="text-center">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              For demo: use any email and password
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}


================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\chat\index.tsx
================================================================================
// pages/chat/index.tsx - Updated with authentication
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { useAuth } from '../../contexts/AuthContext';
import { useChatStore } from '../../stores/chatStore';
import { ChatInterface } from '../../components/chat/ChatInterface';

export default function ChatPage() {
    const router = useRouter();
    const { user, loading: authLoading, authChecked } = useAuth();
    const { connectionStatus, initializeChat } = useChatStore();

    // Initialize chat when user is authenticated
    useEffect(() => {
        if (user && connectionStatus === 'disconnected') {
            initializeChat();
        }
    }, [user, connectionStatus, initializeChat]);

    // Redirect to login if not authenticated
    useEffect(() => {
        if (authChecked && !user && !authLoading) {
            router.push('/auth/login');
        }
    }, [authChecked, user, authLoading, router]);

    // Show loading state while checking auth
    if (!authChecked || authLoading) {
        return (
            <>
                <Head>
                    <title>AdventureOne Chat</title>
                    <meta name="description" content="Chat with your AI assistant" />
                </Head>
                
                <div className="flex items-center justify-center min-h-screen bg-gray-50">
                    <div className="text-center">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                        <p className="text-gray-600">Loading...</p>
                    </div>
                </div>
            </>
        );
    }

    // Redirect to login if not authenticated (will happen automatically via useEffect)
    if (!user) {
        return (
            <>
                <Head>
                    <title>AdventureOne Chat</title>
                    <meta name="description" content="Chat with your AI assistant" />
                </Head>
                
                <div className="flex items-center justify-center min-h-screen bg-gray-50">
                    <div className="text-center">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                        <p className="text-gray-600">Redirecting to login...</p>
                    </div>
                </div>
            </>
        );
    }

    // Show authenticated chat interface
    return (
        <>
            <Head>
                <title>AdventureOne Chat</title>
                <meta name="description" content="Chat with your AI assistant" />
            </Head>
            
            <ChatInterface />
        </>
    );
}

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\activities.tsx
================================================================================
// pages/activities.tsx - Fixed with proper filter typing
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import MainLayout from '../components/layout/MainLayout';
import ActivityCard from '../components/activities/ActivityCard';
import ActivitiesMap from '../components/activities/ActivitiesMap';
import FilterModal from '../components/activities/FilterModal';
import SearchBar from '../components/activities/SearchBar';
import { useActivities } from '../hooks/useActivities';
import { useAuth } from '../contexts/AuthContext';

// Define interfaces locally to avoid import issues
interface Activity {
  $id: string;
  activityname: string;
  location: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  types?: string[];
  eventCount?: number;
  participantCount?: number;
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  isPrivate?: boolean;
  userId: string;
  createdAt: string;
  updatedAt?: string;
  rating?: number;
  reviewCount?: number;
  externalUrls?: string[];
  inclusive?: string[];
  subTypes?: string[];
  typeSpecificData?: Record<string, any>;
}

interface ActivityFilters {
  query?: string;
  types?: string[];
  difficulty?: string[];
  dateRange?: {
    start: string;
    end: string;
  };
  location?: {
    address: string;
    radius: number; // âœ… Properly typed radius property
  };
  maxParticipants?: number;
  inclusive?: string[];
  nearMe?: boolean;
  hasEvents?: boolean;
  privacy?: 'public' | 'private' | 'all';
  radius?: number; // âœ… Additional radius property for compatibility
}

interface User {
  $id: string;
  name?: string;
  email: string;
  location?: {
    address: string;
    latitude: number;
    longitude: number;
  } | string;
  searchRadius?: number;
  disciplines?: string[];
}

// Simple SVG icons to avoid dependency issues
const MapIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7" />
  </svg>
);

const ListIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
  </svg>
);

const FilterIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z" />
  </svg>
);

const PlusIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
  </svg>
);

const Activities: React.FC = () => {
  const router = useRouter();
  const { user } = useAuth();
  const { 
    activities, 
    loading, 
    error,
    fetchActivities,
    searchActivities 
  } = useActivities();

  // View state
  const [viewMode, setViewMode] = useState<'list' | 'map'>('list');
  const [showFilters, setShowFilters] = useState(false);
  
  // Search state
  const [searchQuery, setSearchQuery] = useState('');
  
  // Filter state - âœ… Properly typed with radius support
  const [filters, setFilters] = useState<ActivityFilters>({
    dateRange: undefined,
    difficulty: [],
    types: [],
    maxParticipants: undefined,
    nearMe: false,
    hasEvents: undefined,
    privacy: 'all',
    location: undefined,
    radius: 50 // âœ… Default radius value
  });

  // Load activities on mount
  useEffect(() => {
    fetchActivities();
  }, []);

  // Handle search
  const handleSearch = async (): Promise<void> => {
    if (searchQuery.trim()) {
      await searchActivities(searchQuery, filters);
    } else {
      await fetchActivities();
    }
  };

  // Handle create activity
  const handleCreateActivity = (): void => {
    router.push('/activities/create');
  };

  // Handle filter application - âœ… Fixed function signature
  const handleApplyFilters = (): void => {
  setShowFilters(false);
  
  if (searchQuery.trim() || Object.values(filters).some(v => 
    Array.isArray(v) ? v.length > 0 : v !== undefined && v !== null && v !== 'all'
  )) {
    searchActivities(searchQuery, filters);
  } else {
    fetchActivities();
  }
};

  // Handle activity selection
  const handleActivitySelect = (activity: Activity): void => {
    router.push(`/activities/${activity.$id}`);
  };

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Activities</h1>
            <p className="text-gray-600 dark:text-gray-300 mt-1">
              Discover and join outdoor activities in your area
            </p>
          </div>
          <button
            onClick={handleCreateActivity}
            className="mt-4 lg:mt-0 bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2"
          >
            <PlusIcon className="h-5 w-5" />
            <span>Create Activity</span>
          </button>
        </div>

        {/* View Mode Toggle */}
        <div className="flex items-center justify-between">
          <div className="flex space-x-1 bg-gray-100 dark:bg-slate-800 p-1 rounded-lg">
            <button
              onClick={() => setViewMode('list')}
              className={`
                flex items-center space-x-2 px-3 py-2 rounded transition-colors
                ${viewMode === 'list'
                  ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                  : 'text-gray-600 dark:text-gray-300'
                }
              `}
            >
              <ListIcon className="h-4 w-4" />
              <span className="hidden sm:inline">List</span>
            </button>
            <button
              onClick={() => setViewMode('map')}
              className={`
                flex items-center space-x-2 px-3 py-2 rounded transition-colors
                ${viewMode === 'map'
                  ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                  : 'text-gray-600 dark:text-gray-300'
                }
              `}
            >
              <MapIcon className="h-4 w-4" />
              <span className="hidden sm:inline">Map</span>
            </button>
          </div>
        </div>

        {/* Search and Filters */}
        {viewMode !== 'map' && (
          <div className="flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-4">
            {/* Search Bar */}
            <div className="flex-1">
              <SearchBar
                value={searchQuery}
                onChange={setSearchQuery}
                onSearch={handleSearch}
                placeholder="Search activities..."
              />
            </div>

            {/* Filter Button */}
            <button
              onClick={() => setShowFilters(true)}
              className="flex items-center space-x-2 bg-white dark:bg-slate-800 border border-gray-300 dark:border-slate-600 hover:bg-gray-50 dark:hover:bg-slate-700 px-4 py-2 rounded-lg transition-colors"
            >
              <FilterIcon className="h-4 w-4" />
              <span>Filters</span>
              {Object.values(filters).some(v => 
                Array.isArray(v) ? v.length > 0 : 
                v !== undefined && v !== null && v !== 'all' && v !== false && v !== 50
              ) && (
                <span className="bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400 text-xs px-2 py-1 rounded-full">
                  {Object.values(filters).filter(v => 
                    Array.isArray(v) ? v.length > 0 : 
                    v !== undefined && v !== null && v !== 'all' && v !== false && v !== 50
                  ).length}
                </span>
              )}
            </button>
          </div>
        )}

        {/* Content */}
        {loading ? (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
          </div>
        ) : error ? (
          <div className="text-center py-12">
            <p className="text-red-600 dark:text-red-400">{error}</p>
            <button
              onClick={fetchActivities}
              className="mt-4 text-emerald-600 dark:text-emerald-400 hover:underline"
            >
              Try again
            </button>
          </div>
        ) : viewMode === 'map' ? (
          <div className="h-96 lg:h-[600px] rounded-lg overflow-hidden">
            <ActivitiesMap
              activities={activities || []}
              onActivitySelect={handleActivitySelect}
              userLocation={user?.location}
            />
          </div>
        ) : (
          <div className="space-y-6">
            {(activities && activities.length > 0) ? (
              activities.map((activity: Activity) => (
                <ActivityCard
                  key={activity.$id}
                  activity={activity}
                  onPress={() => handleActivitySelect(activity)}
                  user={user}
                  showActions={true}
                />
              ))
            ) : (
              <div className="text-center py-12">
                <MapIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  No activities found
                </h3>
                <p className="text-gray-500 dark:text-gray-400 mb-6">
                  {searchQuery || Object.values(filters).some(v => 
                    Array.isArray(v) ? v.length > 0 : 
                    v !== undefined && v !== null && v !== 'all' && v !== false && v !== 50
                  )
                    ? 'Try adjusting your search or filters'
                    : 'Be the first to create an activity in your area'
                  }
                </p>
                <button
                  onClick={handleCreateActivity}
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg transition-colors"
                >
                  Create First Activity
                </button>
              </div>
            )}
          </div>
        )}

        {/* Filter Modal - âœ… Fixed onApply prop */}
        <FilterModal
              isOpen={showFilters}
              onClose={() => setShowFilters(false)}
              filters={filters}
              onFiltersChange={setFilters}
              onApply={handleApplyFilters}
            />
      </div>
    </MainLayout>
  );
};

export default Activities;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\events.tsx
================================================================================
// pages/events.tsx - Complete events page with all TypeScript errors fixed
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import MainLayout from '../components/layout/MainLayout';
import EventCard from '../components/events/EventCard';
import EventsCalendar from '../components/events/EventsCalander';
import EventFilterModal from '../components/events/EventFilterModal';
import SearchBar from '../components/activities/SearchBar';
import { useEvents } from '../hooks/useEvents';
import { useAuth } from '../contexts/AuthContext';

// Define interfaces locally to avoid import issues
interface Event {
  $id: string;
  eventName: string;
  activityName?: string;
  activityId?: string;
  startDate: string;
  startTime?: string;
  endDate?: string;
  endTime?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  maxParticipants?: number;
  currentParticipants?: number;
  participants?: Array<{ 
    userId: string; 
    joinedAt: string; 
    name?: string; 
  }>;
  organizerId: string;
  organizer?: { name: string; avatar?: string; };
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  inclusive?: string[];
  isPrivate?: boolean;
  createdAt: string;
  updatedAt?: string;
  tags?: string[];
  requirements?: string[];
  equipment?: string[];
}

interface EventFilters {
  query?: string;
  types?: string[];
  difficulty?: string[];
  dateRange?: {
    start: string;
    end: string;
  };
  location?: {
    address: string;
    radius: number;
  };
  maxParticipants?: number;
  inclusive?: string[];
  nearMe?: boolean;
}

interface User {
  $id: string;
  name?: string;
  email: string;
  location?: {
    address: string;
    latitude: number;
    longitude: number;
  } | string;
}

// Simple SVG icons to avoid dependency issues
const CalendarIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const ListIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
  </svg>
);

const GridIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
  </svg>
);

const FilterIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z" />
  </svg>
);

const PlusIcon: React.FC<{ className?: string }> = ({ className = "h-5 w-5" }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
  </svg>
);

const Events: React.FC = () => {
  const router = useRouter();
  const { user } = useAuth();
  const { 
    events, 
    loading, 
    error,
    fetchEvents,
    searchEvents,
    joinEvent,
    leaveEvent
  } = useEvents();

  // View state
  const [viewMode, setViewMode] = useState<'list' | 'grid' | 'calendar'>('list');
  const [showFilters, setShowFilters] = useState(false);
  
  // Tab state
  const [activeTab, setActiveTab] = useState<'all' | 'joined' | 'hosting'>('all');
  
  // Search state
  const [searchQuery, setSearchQuery] = useState('');
  
  // Filter state
  const [filters, setFilters] = useState<EventFilters>({
    dateRange: undefined,
    difficulty: [],
    types: [],
    maxParticipants: undefined,
    nearMe: false
  });

  // Load events on mount
  useEffect(() => {
    fetchEvents();
  }, []);

  // Filter events based on active tab
  const getFilteredEvents = (): Event[] => {
    if (!events) return [];
    
    switch (activeTab) {
      case 'joined':
        return events.filter((event: Event) => 
          event.participants?.some((p) => p.userId === user?.$id)
        );
      case 'hosting':
        return events.filter((event: Event) => event.organizerId === user?.$id);
      default:
        return events;
    }
  };

  const filteredEvents = getFilteredEvents();

  // Get tab counts
  const getTabCounts = () => {
    if (!events || !user) {
      return { all: 0, joined: 0, hosting: 0 };
    }

    return {
      all: events.length,
      joined: events.filter((event: Event) => 
        event.participants?.some((p) => p.userId === user.$id)
      ).length,
      hosting: events.filter((event: Event) => event.organizerId === user.$id).length
    };
  };

  const tabCounts = getTabCounts();

  // Handle search
  const handleSearch = async (): Promise<void> => {
    if (searchQuery.trim()) {
      await searchEvents(searchQuery, filters);
    } else {
      await fetchEvents();
    }
  };

  // Handle join/leave event
  const handleJoinEvent = async (eventId: string): Promise<void> => {
    try {
      await joinEvent(eventId);
      // Refresh events to show updated participant status
      await fetchEvents();
    } catch (error) {
      console.error('Error joining event:', error);
    }
  };

  const handleLeaveEvent = async (eventId: string): Promise<void> => {
    try {
      await leaveEvent(eventId);
      // Refresh events to show updated participant status
      await fetchEvents();
    } catch (error) {
      console.error('Error leaving event:', error);
    }
  };

  // Handle create event
  const handleCreateEvent = (): void => {
    router.push('/events/create');
  };

  // Handle filter application - Fixed function signature
  const handleApplyFilters = (): void => {
    setShowFilters(false);
    
    if (searchQuery.trim() || Object.values(filters).some(v => 
      Array.isArray(v) ? v.length > 0 : v !== undefined && v !== null
    )) {
      searchEvents(searchQuery, filters);
    } else {
      fetchEvents();
    }
  };

  // Tab configuration
  const tabs = [
    {
      key: 'all' as const,
      label: 'All Events',
      count: tabCounts.all
    },
    {
      key: 'joined' as const,
      label: 'Joined',
      count: tabCounts.joined
    },
    {
      key: 'hosting' as const,
      label: 'Hosting',
      count: tabCounts.hosting
    }
  ];

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Events</h1>
            <p className="text-gray-600 dark:text-gray-300 mt-1">
              Discover and join exciting outdoor events in your area
            </p>
          </div>
          <button
            onClick={handleCreateEvent}
            className="mt-4 lg:mt-0 bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2"
          >
            <PlusIcon className="h-5 w-5" />
            <span>Create Event</span>
          </button>
        </div>

        {/* View Mode Toggle */}
        <div className="flex items-center justify-between">
          <div className="flex space-x-1 bg-gray-100 dark:bg-slate-800 p-1 rounded-lg">
            <button
              onClick={() => setViewMode('list')}
              className={`
                flex items-center space-x-2 px-3 py-2 rounded transition-colors
                ${viewMode === 'list'
                  ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                  : 'text-gray-600 dark:text-gray-300'
                }
              `}
            >
              <ListIcon className="h-4 w-4" />
              <span className="hidden sm:inline">List</span>
            </button>
            <button
              onClick={() => setViewMode('grid')}
              className={`
                flex items-center space-x-2 px-3 py-2 rounded transition-colors
                ${viewMode === 'grid'
                  ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                  : 'text-gray-600 dark:text-gray-300'
                }
              `}
            >
              <GridIcon className="h-4 w-4" />
              <span className="hidden sm:inline">Grid</span>
            </button>
            <button
              onClick={() => setViewMode('calendar')}
              className={`
                flex items-center space-x-2 px-3 py-2 rounded transition-colors
                ${viewMode === 'calendar'
                  ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                  : 'text-gray-600 dark:text-gray-300'
                }
              `}
            >
              <CalendarIcon className="h-4 w-4" />
              <span className="hidden sm:inline">Calendar</span>
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex space-x-1 bg-gray-100 dark:bg-slate-800 p-1 rounded-lg">
          {tabs.map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`
                flex items-center space-x-2 px-4 py-2 rounded-md transition-colors flex-1 justify-center
                ${activeTab === tab.key
                  ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'
                }
              `}
            >
              <span>{tab.label}</span>
              <span className={`
                px-2 py-1 rounded-full text-xs
                ${activeTab === tab.key
                  ? 'bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400'
                  : 'bg-gray-200 dark:bg-slate-600 text-gray-600 dark:text-gray-300'
                }
              `}>
                {tab.count}
              </span>
            </button>
          ))}
        </div>

        {/* Search and Filters */}
        {viewMode !== 'calendar' && (
          <div className="flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-4">
            {/* Search Bar */}
            <div className="flex-1">
              <SearchBar
                value={searchQuery}
                onChange={setSearchQuery}
                onSearch={handleSearch}
                placeholder="Search events..."
              />
            </div>

            {/* Filter Button */}
            <button
              onClick={() => setShowFilters(true)}
              className="flex items-center space-x-2 bg-white dark:bg-slate-800 border border-gray-300 dark:border-slate-600 hover:bg-gray-50 dark:hover:bg-slate-700 px-4 py-2 rounded-lg transition-colors"
            >
              <FilterIcon className="h-4 w-4" />
              <span>Filters</span>
              {Object.values(filters).some(v => Array.isArray(v) ? v.length > 0 : v) && (
                <span className="bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400 text-xs px-2 py-1 rounded-full">
                  {Object.values(filters).filter(v => Array.isArray(v) ? v.length > 0 : v).length}
                </span>
              )}
            </button>
          </div>
        )}

        {/* Content */}
        {loading ? (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
          </div>
        ) : error ? (
          <div className="text-center py-12">
            <p className="text-red-600 dark:text-red-400">{error}</p>
            <button
              onClick={fetchEvents}
              className="mt-4 text-emerald-600 dark:text-emerald-400 hover:underline"
            >
              Try again
            </button>
          </div>
        ) : viewMode === 'calendar' ? (
          <EventsCalendar
            events={filteredEvents}
            onEventSelect={(event: any) => router.push(`/events/${event.$id}`)}          />
        ) : (
          <div className={`
            ${viewMode === 'grid' 
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' 
              : 'space-y-6'
            }
          `}>
            {filteredEvents.length > 0 ? (
              filteredEvents.map((event: Event) => (
                <EventCard
                  key={event.$id}
                  event={event}
                  onPress={() => router.push(`/events/${event.$id}`)}
                  onJoin={() => handleJoinEvent(event.$id)}
                  onLeave={() => handleLeaveEvent(event.$id)}
                  user={user}
                  isGrid={viewMode === 'grid'}
                />
              ))
            ) : (
              <div className="text-center py-12 col-span-full">
                <CalendarIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                  {activeTab === 'joined' 
                    ? "You haven't joined any events yet"
                    : activeTab === 'hosting'
                    ? "You're not hosting any events yet"
                    : "No events found"
                  }
                </h3>
                <p className="text-gray-500 dark:text-gray-400 mb-6">
                  {activeTab === 'joined'
                    ? "Join exciting events in your area"
                    : activeTab === 'hosting'
                    ? "Create your first event to bring people together"
                    : searchQuery
                    ? 'Try adjusting your search or filters'
                    : 'Be the first to create an event in your area'
                  }
                </p>
                <button
                  onClick={() => router.push('/events/create')}
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg transition-colors"
                >
                  {activeTab === 'hosting' ? 'Create Your First Event' : 'Create Event'}
                </button>
              </div>
            )}
          </div>
        )}

        {/* Filter Modal - Fixed onApply prop */}
        <EventFilterModal
          isOpen={showFilters}
          onClose={() => setShowFilters(false)}
          filters={filters}
          onFiltersChange={setFilters}
          onApply={handleApplyFilters}
        />
      </div>
    </MainLayout>
  );
};

export default Events;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\feed.tsx
================================================================================
// pages/feed.tsx - Complete fixed version with proper compact prop usage
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import MainLayout from '../components/layout/MainLayout';
import ActivityCard from '../components/activities/ActivityCard';
import EventCard from '../components/events/EventCard';
import UserStatsCard from '../components/profile/UserStatsCard';
import { useActivities } from '../hooks/useActivities';
import { useEvents } from '../hooks/useEvents';
import { useAuth } from '../contexts/AuthContext';

// Define interfaces locally to avoid import issues
interface FeedItem {
  $id: string;
  type: 'activity' | 'event';
  timestamp: string;
  activityname?: string;
  eventName?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  types?: string[];
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  isPrivate?: boolean;
  userId?: string;
  organizerId?: string;
  createdAt?: string;
  startDate?: string;
  eventCount?: number;
  participantCount?: number;
  currentParticipants?: number;
  maxParticipants?: number;
  participants?: Array<{ 
    userId: string; 
    joinedAt: string; 
    name?: string; 
  }>;
  rating?: number;
  reviewCount?: number;
  externalUrls?: string[];
  inclusive?: string[];
  activityId?: string;
  startTime?: string;
  endDate?: string;
  endTime?: string;
  organizer?: { name: string; avatar?: string; };
  tags?: string[];
  requirements?: string[];
  equipment?: string[];
  [key: string]: any;
}

interface Activity {
  $id: string;
  activityname: string;
  location: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  types?: string[];
  eventCount?: number;
  participantCount?: number;
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  isPrivate?: boolean;
  userId: string;
  createdAt: string;
  updatedAt?: string;
  rating?: number;
  reviewCount?: number;
  externalUrls?: string[];
  inclusive?: string[];
}

interface Event {
  $id: string;
  eventName: string;
  activityName?: string;
  activityId?: string;
  startDate: string;
  startTime?: string;
  endDate?: string;
  endTime?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  maxParticipants?: number;
  currentParticipants?: number;
  participants?: Array<{ 
    userId: string; 
    joinedAt: string; 
    name?: string; 
  }>;
  organizerId: string;
  organizer?: { name: string; avatar?: string; };
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  inclusive?: string[];
  isPrivate?: boolean;
  createdAt: string;
  updatedAt?: string;
  tags?: string[];
  requirements?: string[];
  equipment?: string[];
}

const Feed: React.FC = () => {
  const router = useRouter();
  const { user } = useAuth();
  const { 
    activities, 
    publicActivities,
    loading: activitiesLoading,
    fetchActivities,
    fetchPublicActivities
  } = useActivities();
  
  const { 
    events, 
    publicEvents,
    loading: eventsLoading,
    fetchEvents,
    fetchPublicEvents,
    joinEvent,
    leaveEvent
  } = useEvents();

  // Feed state
  const [activeTab, setActiveTab] = useState<'involved' | 'suggested' | 'nearby'>('involved');
  const [contentFilter, setContentFilter] = useState<'all' | 'activities' | 'events'>('all');
  const [viewMode, setViewMode] = useState<'list' | 'grid'>('list');
  
  // Data state
  const [involvedItems, setInvolvedItems] = useState<FeedItem[]>([]);
  const [suggestedItems, setSuggestedItems] = useState<FeedItem[]>([]);
  const [nearbyItems, setNearbyItems] = useState<FeedItem[]>([]);
  const [refreshing, setRefreshing] = useState(false);

  // User preferences
  const userLocation = user?.location;
  const userDisciplines = user?.disciplines || [];

  const loading = activitiesLoading || eventsLoading;

  // Load data on mount
  useEffect(() => {
    loadFeedData();
  }, [user]);

  const loadFeedData = async (): Promise<void> => {
    try {
      setRefreshing(true);
      
      await Promise.all([
        fetchActivities(),
        fetchEvents(),
        fetchPublicActivities(),
        fetchPublicEvents()
      ]);
      
    } catch (error) {
      console.error('Error loading feed data:', error);
    } finally {
      setRefreshing(false);
    }
  };

  // Process feed data - Convert activities and events to FeedItems
  useEffect(() => {
    if (!user) return;

    // Helper function to convert Activity to FeedItem
    const activityToFeedItem = (activity: Activity): FeedItem => ({
      ...activity,
      type: 'activity' as const,
      timestamp: activity.createdAt
    });

    // Helper function to convert Event to FeedItem
    const eventToFeedItem = (event: Event): FeedItem => ({
      ...event,
      type: 'event' as const,
      timestamp: event.startDate,
      activityname: event.eventName,
      userId: event.organizerId,
      createdAt: event.createdAt
    });

    // Involved items (user's activities and joined events)
    const userActivities = (activities || []).filter((a: Activity) => a.userId === user.$id);
    const joinedEvents = (events || []).filter((e: Event) => 
      e.participants?.some((p) => p.userId === user.$id) || e.organizerId === user.$id
    );
    
    const involved: FeedItem[] = [
      ...userActivities.map(activityToFeedItem),
      ...joinedEvents.map(eventToFeedItem)
    ].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
    
    setInvolvedItems(involved);

    // Suggested items (based on user preferences)
    const suggestedActivities = (publicActivities || []).filter((a: Activity) => 
      a.userId !== user.$id &&
      (!a.types || a.types.some((type: string) => userDisciplines.includes(type)))
    );
    
    const suggestedEvts = (publicEvents || []).filter((e: Event) => 
      e.organizerId !== user.$id &&
      !e.participants?.some((p) => p.userId === user.$id)
    );
    
    const suggested: FeedItem[] = [
      ...suggestedActivities.map(activityToFeedItem),
      ...suggestedEvts.map(eventToFeedItem)
    ].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
    
    setSuggestedItems(suggested);

    // Nearby items (within user's radius)
    const nearbyActivities = (publicActivities || []).filter((a: Activity) => {
      if (!userLocation || !a.location) return false;
      // TODO: Add distance calculation logic here
      return true;
    });
    
    const nearbyEvts = (publicEvents || []).filter((e: Event) => {
      if (!userLocation || !e.location) return false;
      // TODO: Add distance calculation logic here
      return true;
    });
    
    const nearby: FeedItem[] = [
      ...nearbyActivities.map(activityToFeedItem),
      ...nearbyEvts.map(eventToFeedItem)
    ].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
    
    setNearbyItems(nearby);
    
  }, [activities, events, publicActivities, publicEvents, user]);

  // Get current items based on active tab
  const getCurrentItems = (): FeedItem[] => {
    let items: FeedItem[] = [];
    
    switch (activeTab) {
      case 'involved':
        items = involvedItems;
        break;
      case 'suggested':
        items = suggestedItems;
        break;
      case 'nearby':
        items = nearbyItems;
        break;
    }

    // Apply content filter
    if (contentFilter !== 'all') {
      items = items.filter((item: FeedItem) => 
        contentFilter === 'activities' ? item.type === 'activity' : item.type === 'event'
      );
    }

    return items;
  };

  const currentItems = getCurrentItems();

  // Tab configuration
  const tabs = [
    {
      key: 'involved' as const,
      label: 'My Activities',
      icon: 'ðŸŽ¯',
      count: involvedItems.length
    },
    {
      key: 'suggested' as const,
      label: 'Suggested',
      icon: 'ðŸ’¡',
      count: suggestedItems.length
    },
    {
      key: 'nearby' as const,
      label: 'Nearby',
      icon: 'ðŸ“',
      count: nearbyItems.length
    }
  ];

  // Content filter configuration
  const contentFilters = [
    {
      key: 'all' as const,
      label: 'All',
      icon: 'ðŸŒŸ',
      count: currentItems.length
    },
    {
      key: 'activities' as const,
      label: 'Activities',
      icon: 'ðŸƒ',
      count: currentItems.filter((item: FeedItem) => item.type === 'activity').length
    },
    {
      key: 'events' as const,
      label: 'Events',
      icon: 'ðŸ“…',
      count: currentItems.filter((item: FeedItem) => item.type === 'event').length
    }
  ];

  // Event handlers
  const handleItemPress = (item: FeedItem): void => {
    if (item.type === 'activity') {
      router.push(`/activities/${item.$id}`);
    } else {
      router.push(`/events/${item.$id}`);
    }
  };

  const handleJoinEvent = async (eventId: string): Promise<void> => {
    try {
      await joinEvent(eventId);
      await loadFeedData();
    } catch (error) {
      console.error('Error joining event:', error);
    }
  };

  const handleLeaveEvent = async (eventId: string): Promise<void> => {
    try {
      await leaveEvent(eventId);
      await loadFeedData();
    } catch (error) {
      console.error('Error leaving event:', error);
    }
  };

  const handleCreateActivity = (): void => {
    router.push('/activities/create');
  };

  const handleCreateEvent = (): void => {
    router.push('/events/create');
  };

  if (!user) {
    return (
      <MainLayout>
        <div className="text-center py-12">
          <h2 className="text-xl font-semibold mb-4">Please log in to view your feed</h2>
          <button
            onClick={() => router.push('/auth/login')}
            className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg transition-colors"
          >
            Log In
          </button>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* User Stats Card */}
        <UserStatsCard 
          user={user}
          stats={{
            activitiesCreated: activities?.filter((a: Activity) => a.userId === user.$id).length || 0,
            eventsHosted: events?.filter((e: Event) => e.organizerId === user.$id).length || 0,
            eventsJoined: events?.filter((e: Event) => 
              e.participants?.some((p) => p.userId === user.$id)
            ).length || 0,
            totalParticipants: activities?.reduce((total: number, a: Activity) => 
              total + (a.participantCount || 0), 0
            ) || 0
          }}
        />

        {/* Tab Navigation */}
        <div className="flex space-x-1 bg-gray-100 dark:bg-slate-800 p-1 rounded-lg">
          {tabs.map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`
                flex items-center space-x-2 px-4 py-2 rounded-md transition-all duration-200 flex-1 justify-center
                ${activeTab === tab.key
                  ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'
                }
              `}
            >
              <span>{tab.icon}</span>
              <span>{tab.label}</span>
              <span className={`
                px-2 py-1 rounded-full text-xs
                ${activeTab === tab.key
                  ? 'bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400'
                  : 'bg-gray-200 dark:bg-slate-600 text-gray-600 dark:text-gray-300'
                }
              `}>
                {tab.count}
              </span>
            </button>
          ))}
        </div>

        {/* View Controls */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
          {/* Content Filters */}
          <div className="flex space-x-2">
            {contentFilters.map((filter) => (
              <button
                key={filter.key}
                onClick={() => setContentFilter(filter.key)}
                className={`
                  flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors
                  ${contentFilter === filter.key
                    ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400 shadow-sm'
                    : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'
                  }
                `}
              >
                <span>{filter.icon}</span>
                <span>{filter.label}</span>
                <span className={`
                  px-2 py-1 rounded-full text-xs
                  ${contentFilter === filter.key
                    ? 'bg-emerald-100 dark:bg-emerald-900 text-emerald-600 dark:text-emerald-400'
                    : 'bg-gray-200 dark:bg-slate-600 text-gray-600 dark:text-gray-300'
                  }
                `}>
                  {filter.count}
                </span>
              </button>
            ))}
          </div>

          {/* View Mode Toggle */}
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600 dark:text-gray-300">View:</span>
            <div className="flex space-x-1 bg-gray-100 dark:bg-slate-800 p-1 rounded-lg">
              <button
                onClick={() => setViewMode('list')}
                className={`
                  px-3 py-1 rounded transition-colors
                  ${viewMode === 'list'
                    ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400'
                    : 'text-gray-600 dark:text-gray-300'
                  }
                `}
              >
                ðŸ“„ List
              </button>
              <button
                onClick={() => setViewMode('grid')}
                className={`
                  px-3 py-1 rounded transition-colors
                  ${viewMode === 'grid'
                    ? 'bg-white dark:bg-slate-600 text-emerald-600 dark:text-emerald-400'
                    : 'text-gray-600 dark:text-gray-300'
                  }
                `}
              >
                âš Grid
              </button>
            </div>
          </div>
        </div>

        {/* Content */}
        {loading ? (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
          </div>
        ) : (
          <div className={`
            ${viewMode === 'grid' 
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' 
              : 'space-y-4'
            }
          `}>
            {currentItems.length > 0 ? (
              currentItems.map((item: FeedItem) => {
                if (item.type === 'activity') {
                  // Convert FeedItem back to Activity for ActivityCard
                  const activityProps: Activity = {
                    $id: item.$id,
                    activityname: item.activityname || 'Untitled Activity',
                    location: item.location || 'Location TBD',
                    description: item.description,
                    types: item.types,
                    eventCount: item.eventCount,
                    participantCount: item.participantCount,
                    difficulty: item.difficulty,
                    isPrivate: item.isPrivate,
                    userId: item.userId || '',
                    createdAt: item.createdAt || item.timestamp,
                    rating: item.rating,
                    reviewCount: item.reviewCount,
                    externalUrls: item.externalUrls,
                    inclusive: item.inclusive
                  };

                  return (
                    <ActivityCard
                      key={`activity-${item.$id}`}
                      activity={activityProps}
                      onPress={() => handleItemPress(item)}
                      user={user}
                      showActions={false}
                      compact={viewMode === 'grid'} // âœ… Now properly typed
                    />
                  );
                } else {
                  // Convert FeedItem back to Event for EventCard
                  const eventProps: Event = {
                    $id: item.$id,
                    eventName: item.activityname || item.eventName || 'Untitled Event',
                    activityName: item.activityname,
                    activityId: item.activityId,
                    startDate: item.timestamp,
                    startTime: item.startTime,
                    endDate: item.endDate,
                    endTime: item.endTime,
                    location: item.location,
                    description: item.description,
                    maxParticipants: item.maxParticipants,
                    currentParticipants: item.currentParticipants,
                    participants: item.participants,
                    organizerId: item.organizerId || item.userId || '',
                    organizer: item.organizer,
                    difficulty: item.difficulty,
                    inclusive: item.inclusive,
                    isPrivate: item.isPrivate,
                    createdAt: item.createdAt || item.timestamp,
                    updatedAt: item.updatedAt,
                    tags: item.tags,
                    requirements: item.requirements,
                    equipment: item.equipment
                  };

                  return (
                    <EventCard
                      key={`event-${item.$id}`}
                      event={eventProps}
                      onPress={() => handleItemPress(item)}
                      onJoin={() => handleJoinEvent(item.$id)}
                      onLeave={() => handleLeaveEvent(item.$id)}
                      user={user}
                      isGrid={viewMode === 'grid'}
                      showActions={activeTab !== 'involved'}
                    />
                  );
                }
              })
            ) : (
              <div className="text-center py-12 col-span-full">
                {activeTab === 'involved' ? (
                  <>
                    <div className="text-6xl mb-4">ðŸŽ¯</div>
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                      Start Your Adventure Journey
                    </h3>
                    <p className="text-gray-500 dark:text-gray-400 mb-6">
                      Create your first activity or join exciting events in your area
                    </p>
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                      <button
                        onClick={handleCreateActivity}
                        className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg transition-colors"
                      >
                        Create Activity
                      </button>
                      <button
                        onClick={handleCreateEvent}
                        className="bg-white dark:bg-slate-800 border border-emerald-600 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-slate-700 px-6 py-3 rounded-lg transition-colors"
                      >
                        Create Event
                      </button>
                    </div>
                  </>
                ) : activeTab === 'suggested' ? (
                  <>
                    <div className="text-6xl mb-4">ðŸ’¡</div>
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                      No Suggestions Yet
                    </h3>
                    <p className="text-gray-500 dark:text-gray-400 mb-6">
                      Update your profile with interests to get personalized suggestions
                    </p>
                    <button
                      onClick={() => router.push('/profile')}
                      className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg transition-colors"
                    >
                      Update Profile
                    </button>
                  </>
                ) : (
                  <>
                    <div className="text-6xl mb-4">ðŸ“</div>
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                      No Nearby Activities
                    </h3>
                    <p className="text-gray-500 dark:text-gray-400 mb-6">
                      Try expanding your search radius or create activities in your area
                    </p>
                    <button
                      onClick={handleCreateActivity}
                      className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg transition-colors"
                    >
                      Create Local Activity
                    </button>
                  </>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </MainLayout>
  );
};

export default Feed;

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\index.tsx
================================================================================
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '@/contexts/AuthContext';

export default function Home() {
  const router = useRouter();
  const { user, loading } = useAuth();

  useEffect(() => {
    if (!loading) {
      if (user) {
        router.replace('/feed');
      } else {
        router.replace('/auth/login');
      }
    }
  }, [user, loading, router]);

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-slate-900 flex items-center justify-center">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
    </div>
  );
}

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\_app.tsx
================================================================================
import type { AppProps } from 'next/app';
import { AuthProvider } from '@/contexts/AuthContext';
import '@/styles/globals.css';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <AuthProvider>
      <Component {...pageProps} />
    </AuthProvider>
  );
}

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\pages\_document.tsx
================================================================================
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}


================================================================================
FILE: C:\Users\nmera\AdventureOne\web\contexts\AuthContext.tsx
================================================================================
// contexts/AuthContext.tsx - Mock auth context for development
{/*import React, { createContext, useContext, useState, useEffect } from 'react';
import { User } from '@/types';

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: React.ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Mock user data - replace with real authentication
  const mockUser: User = {
    $id: 'user123',
    name: 'Alex Johnson',
    email: 'alex.johnson@example.com',
    location: {
      address: 'Sydney, NSW, Australia',
      latitude: -33.8688,
      longitude: 151.2093
    },
    searchRadius: 50,
    disciplines: ['hiking', 'climbing', 'cycling'],
    emailVerification: true,
    phoneVerification: false,
    createdAt: '2024-01-15T00:00:00.000Z'
  };

  useEffect(() => {
    // Simulate checking for existing session
    const checkAuth = () => {
      setTimeout(() => {
        // For development, auto-login with mock user
        setUser(mockUser);
        setLoading(false);
      }, 1000);
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // For development, accept any email/password
      setUser({
        ...mockUser,
        email: email
      });
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    // In real app, clear session/tokens here
  };

  const value: AuthContextType = {
    user,
    login,
    logout,
    loading
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// pages/_app.tsx - Updated to include AuthProvider
import type { AppProps } from 'next/app';
import { AuthProvider } from '@/contexts/AuthContext';
import '@/styles/globals.css';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <AuthProvider>
      <Component {...pageProps} />
    </AuthProvider>
  );
}

// components/layout/MobileNavigation.tsx - Updated with proper imports
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

const MobileNavigation = () => {
  const router = useRouter();

  const navigationItems = [
    {
      name: 'Feed',
      href: '/feed',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2 2v0" />
        </svg>
      ),
      iconSolid: (
        <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
          <path d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2 2v0z" />
        </svg>
      )
    },
    {
      name: 'Activities',
      href: '/activities',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3v10.5" />
        </svg>
      ),
      iconSolid: (
        <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
          <path d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3v10.5z" />
        </svg>
      )
    },
    {
      name: 'Events',
      href: '/events',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      ),
      iconSolid: (
        <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
          <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      )
    },
    {
      name: 'Chat',
      href: '/chat',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      ),
      iconSolid: (
        <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
          <path d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      )
    },
    {
      name: 'Profile',
      href: '/profile',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      ),
      iconSolid: (
        <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
          <path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      )
    }
  ];

  const isActiveRoute = (href: string) => {
    if (href === '/feed') {
      return router.pathname === '/feed' || router.pathname === '/';
    }
    return router.pathname.startsWith(href);
  };

  return (
    <>
      
      <header className="bg-white dark:bg-slate-800 border-b border-gray-200 dark:border-slate-700 px-4 py-3">
        <div className="flex items-center justify-center">
          <div className="flex items-center space-x-2">
            <div className="w-6 h-6 bg-emerald-600 rounded-md flex items-center justify-center">
              <span className="text-white font-bold text-sm">A1</span>
            </div>
            <span className="text-lg font-bold text-emerald-600 dark:text-emerald-400">
              AdventureOne
            </span>
          </div>
        </div>
      </header>

     
      <div className="fixed bottom-0 left-0 right-0 z-50 bg-white dark:bg-slate-800 border-t border-gray-200 dark:border-slate-700 px-2 py-2">
        <div className="flex items-center justify-around">
          {navigationItems.map((item) => {
            const isActive = isActiveRoute(item.href);
            const Icon = isActive ? item.iconSolid : item.icon;
            
            return (
              <Link
                key={item.name}
                href={item.href}
                className={`
                  flex flex-col items-center justify-center px-3 py-2 rounded-lg transition-all duration-200 min-w-[60px]
                  ${isActive
                    ? 'text-emerald-600 dark:text-emerald-400'
                    : 'text-gray-500 dark:text-gray-400'
                  }
                `}
              >
                <div className="mb-1">{Icon}</div>
                <span className="text-xs font-medium">{item.name}</span>
                {isActive && (
                  <div className="w-1 h-1 bg-emerald-600 dark:bg-emerald-400 rounded-full mt-1" />
                )}
              </Link>
            );
          })}
        </div>
      </div>
    </>
  );
};

export default MobileNavigation; */}

// contexts/AuthContext.tsx - Mock auth context for development
import React, { createContext, useContext, useState, useEffect } from 'react';
import { User } from '@/types';

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: React.ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Mock user data - replace with real authentication
  const mockUser: User = {
    $id: 'user123',
    name: 'Alex Johnson',
    email: 'alex.johnson@example.com',
    location: {
      address: 'Sydney, NSW, Australia',
      latitude: -33.8688,
      longitude: 151.2093
    },
    searchRadius: 50,
    disciplines: ['hiking', 'climbing', 'cycling'],
    emailVerification: true,
    phoneVerification: false,
    createdAt: '2024-01-15T00:00:00.000Z'
  };

  useEffect(() => {
    // Simulate checking for existing session
    const checkAuth = () => {
      setTimeout(() => {
        // For development, auto-login with mock user
        setUser(mockUser);
        setLoading(false);
      }, 1000);
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // For development, accept any email/password
      setUser({
        ...mockUser,
        email: email
      });
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    // In real app, clear session/tokens here
  };

  const value: AuthContextType = {
    user,
    login,
    logout,
    loading
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\hooks\useActivities.ts
================================================================================
// hooks/useActivities.ts - Complete activities hook with proper TypeScript typing
import { useState } from 'react';
import { Activity, ActivityFilters, UseActivitiesReturn } from '@/types';

export const useActivities = (): UseActivitiesReturn => {
  const [activities, setActivities] = useState<Activity[]>([]);
  const [publicActivities, setPublicActivities] = useState<Activity[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchActivities = async (): Promise<void> => {
    setLoading(true);
    setError(null);
    try {
      console.log('Fetching user activities...');
      
      // Mock activities data - Replace with real API call to your backend
      const mockActivities: Activity[] = [
        {
          $id: '1',
          activityname: 'Morning Hike at Blue Mountains',
          location: 'Blue Mountains, NSW',
          description: 'A refreshing morning hike through scenic trails with breathtaking views',
          types: ['hiking', 'nature', 'fitness'],
          eventCount: 3,
          participantCount: 12,
          difficulty: 'intermediate',
          isPrivate: false,
          userId: 'user123',
          createdAt: new Date().toISOString(),
          rating: 4.8,
          reviewCount: 15,
          inclusive: ['beginner-friendly', 'family-friendly'],
          externalUrls: ['https://nationalparks.nsw.gov.au/blue-mountains'],
          subTypes: ['hiking.trail', 'nature.wildlife'],
          typeSpecificData: {
            'hiking.trail': {
              trailLength: '8.5km',
              elevation: '400m',
              surface: 'mixed'
            },
            'nature.wildlife': {
              wildlifeTypes: ['birds', 'native mammals'],
              bestTime: 'early morning'
            }
          }
        },
        {
          $id: '2',
          activityname: 'Rock Climbing Adventure',
          location: { 
            address: 'Katoomba, NSW', 
            latitude: -33.7129, 
            longitude: 150.3107 
          },
          description: 'Beginner-friendly rock climbing session with professional instruction',
          types: ['climbing', 'adventure', 'strength'],
          eventCount: 1,
          participantCount: 8,
          difficulty: 'beginner',
          isPrivate: false,
          userId: 'user123',
          createdAt: new Date(Date.now() - 86400000).toISOString(), // Yesterday
          rating: 4.5,
          reviewCount: 8,
          inclusive: ['beginner-friendly', 'wheelchair-accessible'],
          externalUrls: ['https://climbingguide.com.au/katoomba'],
          subTypes: ['climbing.sport'],
          typeSpecificData: {
            'climbing.sport': {
              gradeRange: '5.6-5.10a',
              routeCount: 12,
              rockType: 'sandstone'
            }
          }
        },
        {
          $id: '3',
          activityname: 'Coastal Photography Walk',
          location: 'Bondi to Coogee Walk, NSW',
          description: 'Capture stunning coastal scenery while enjoying a leisurely walk',
          types: ['photography', 'walking', 'coastal'],
          eventCount: 2,
          participantCount: 15,
          difficulty: 'beginner',
          isPrivate: false,
          userId: 'user456',
          createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago
          rating: 4.9,
          reviewCount: 22,
          inclusive: ['senior-friendly', 'family-friendly', 'pet-friendly'],
          externalUrls: ['https://www.sydney.com/destinations/sydney/sydney-east/bondi-coogee'],
          subTypes: ['photography.landscape'],
          typeSpecificData: {
            'photography.landscape': {
              bestLighting: 'golden hour',
              equipment: 'camera, tripod',
              subjects: 'coastline, beaches, cliffs'
            }
          }
        }
      ];
      
      setActivities(mockActivities);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch activities';
      setError(errorMessage);
      console.error('Error fetching activities:', err);
    } finally {
      setLoading(false);
    }
  };

  const fetchPublicActivities = async (): Promise<void> => {
    setLoading(true);
    setError(null);
    try {
      console.log('Fetching public activities...');
      
      // Mock public activities data
      const mockPublicActivities: Activity[] = [
        {
          $id: 'pub-1',
          activityname: 'Sydney Harbour Kayaking',
          location: 'Circular Quay, Sydney',
          description: 'Paddle through iconic Sydney Harbour with stunning city views',
          types: ['kayaking', 'water-sports', 'sightseeing'],
          eventCount: 5,
          participantCount: 32,
          difficulty: 'intermediate',
          isPrivate: false,
          userId: 'user789',
          createdAt: new Date(Date.now() - 259200000).toISOString(), // 3 days ago
          rating: 4.7,
          reviewCount: 28,
          inclusive: ['beginner-friendly'],
          externalUrls: ['https://kayaksydney.com.au'],
          subTypes: ['kayaking.touring'],
          typeSpecificData: {
            'kayaking.touring': {
              duration: '3 hours',
              distance: '8km',
              equipment: 'provided'
            }
          }
        },
        {
          $id: 'pub-2',
          activityname: 'Urban Cycling Adventure',
          location: { 
            address: 'Hyde Park, Sydney', 
            latitude: -33.8737, 
            longitude: 151.2135 
          },
          description: 'Explore Sydney\'s bike paths and hidden cycling gems',
          types: ['cycling', 'urban', 'fitness'],
          eventCount: 4,
          participantCount: 18,
          difficulty: 'beginner',
          isPrivate: false,
          userId: 'user101',
          createdAt: new Date(Date.now() - 345600000).toISOString(), // 4 days ago
          rating: 4.3,
          reviewCount: 12,
          inclusive: ['family-friendly', 'pet-friendly'],
          externalUrls: ['https://www.sydneycycleways.net'],
          subTypes: ['cycling.road'],
          typeSpecificData: {
            'cycling.road': {
              distance: '25km',
              terrain: 'flat',
              traffic: 'low'
            }
          }
        },
        {
          $id: 'pub-3',
          activityname: 'Meditation in Nature',
          location: 'Royal Botanic Gardens, Sydney',
          description: 'Find inner peace surrounded by beautiful gardens and nature',
          types: ['meditation', 'wellness', 'nature'],
          eventCount: 8,
          participantCount: 45,
          difficulty: 'beginner',
          isPrivate: false,
          userId: 'user202',
          createdAt: new Date(Date.now() - 432000000).toISOString(), // 5 days ago
          rating: 4.9,
          reviewCount: 35,
          inclusive: ['senior-friendly', 'wheelchair-accessible', 'beginner-friendly'],
          externalUrls: ['https://www.rbgsyd.nsw.gov.au'],
          subTypes: ['meditation.mindfulness'],
          typeSpecificData: {
            'meditation.mindfulness': {
              duration: '45 minutes',
              style: 'guided',
              level: 'all levels'
            }
          }
        }
      ];
      
      setPublicActivities(mockPublicActivities);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch public activities';
      setError(errorMessage);
      console.error('Error fetching public activities:', err);
    } finally {
      setLoading(false);
    }
  };

  const searchActivities = async (query: string, filters?: ActivityFilters): Promise<void> => {
    setLoading(true);
    setError(null);
    try {
      console.log('Searching activities:', { query, filters });
      
      // TODO: Replace with real API call
      // For now, filter existing activities
      const allActivities = [...activities, ...publicActivities];
      const filtered = allActivities.filter((activity: Activity) => {
        if (query && !activity.activityname.toLowerCase().includes(query.toLowerCase())) {
          return false;
        }
        
        if (filters?.types && filters.types.length > 0) {
          if (!activity.types || !activity.types.some((type: string) => filters.types!.includes(type))) {
            return false;
          }
        }
        
        if (filters?.difficulty && filters.difficulty.length > 0) {
          if (!activity.difficulty || !filters.difficulty.includes(activity.difficulty)) {
            return false;
          }
        }
        
        return true;
      });
      
      setActivities(filtered);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to search activities';
      setError(errorMessage);
      console.error('Error searching activities:', err);
    } finally {
      setLoading(false);
    }
  };

  const createActivity = async (activityData: Partial<Activity>): Promise<Activity> => {
    try {
      console.log('Creating activity:', activityData);
      
      // TODO: Replace with real API call
      const newActivity: Activity = {
        $id: `activity-${Date.now()}`,
        activityname: activityData.activityname || 'New Activity',
        location: activityData.location || 'Location TBD',
        userId: 'current-user',
        createdAt: new Date().toISOString(),
        difficulty: activityData.difficulty || 'beginner',
        isPrivate: activityData.isPrivate || false,
        eventCount: 0,
        participantCount: 0,
        types: activityData.types || [],
        ...activityData
      };
      
      setActivities(prev => [newActivity, ...prev]);
      return newActivity;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to create activity';
      setError(errorMessage);
      console.error('Error creating activity:', err);
      throw err;
    }
  };

  const updateActivity = async (id: string, activityData: Partial<Activity>): Promise<Activity> => {
    try {
      console.log('Updating activity:', id, activityData);
      
      // TODO: Replace with real API call
      let updatedActivity: Activity | null = null;
      
      setActivities(prev => 
        prev.map((activity: Activity) => {
          if (activity.$id === id) {
            updatedActivity = { ...activity, ...activityData, updatedAt: new Date().toISOString() };
            return updatedActivity;
          }
          return activity;
        })
      );
      
      if (!updatedActivity) {
        throw new Error('Activity not found');
      }
      
      return updatedActivity;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to update activity';
      setError(errorMessage);
      console.error('Error updating activity:', err);
      throw err;
    }
  };

  const deleteActivity = async (id: string): Promise<void> => {
    try {
      console.log('Deleting activity:', id);
      
      // TODO: Replace with real API call
      setActivities(prev => prev.filter((activity: Activity) => activity.$id !== id));
      setPublicActivities(prev => prev.filter((activity: Activity) => activity.$id !== id));
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to delete activity';
      setError(errorMessage);
      console.error('Error deleting activity:', err);
      throw err;
    }
  };

  return {
    activities,
    publicActivities,
    loading,
    error,
    fetchActivities,
    fetchPublicActivities,
    searchActivities,
    createActivity,
    updateActivity,
    deleteActivity
  };
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\hooks\useEvents.ts
================================================================================
// hooks/useEvents.ts - Fixed participant parameter typing
import { useState } from 'react';

// Define interfaces locally to avoid import issues
interface Participant {
  userId: string;
  joinedAt: string;
  name?: string;
}

interface Event {
  $id: string;
  eventName: string;
  activityName?: string;
  activityId?: string;
  startDate: string;
  startTime?: string;
  endDate?: string;
  endTime?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  maxParticipants?: number;
  currentParticipants?: number;
  participants?: Participant[];
  organizerId: string;
  organizer?: {
    name: string;
    avatar?: string;
  };
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  inclusive?: string[];
  isPrivate?: boolean;
  createdAt: string;
  updatedAt?: string;
  tags?: string[];
  requirements?: string[];
  equipment?: string[];
}

interface EventFilters {
  query?: string;
  types?: string[];
  difficulty?: string[];
  dateRange?: {
    start: string;
    end: string;
  };
  location?: {
    address: string;
    radius: number;
  };
  maxParticipants?: number;
  inclusive?: string[];
  nearMe?: boolean;
}

interface UseEventsReturn {
  events: Event[];
  publicEvents: Event[];
  loading: boolean;
  error: string | null;
  fetchEvents: () => Promise<void>;
  fetchPublicEvents: () => Promise<void>;
  searchEvents: (query: string, filters?: EventFilters) => Promise<void>;
  joinEvent: (eventId: string) => Promise<void>;
  leaveEvent: (eventId: string) => Promise<void>;
  createEvent: (event: Partial<Event>) => Promise<Event>;
  updateEvent: (id: string, event: Partial<Event>) => Promise<Event>;
  deleteEvent: (id: string) => Promise<void>;
}

export const useEvents = (): UseEventsReturn => {
  const [events, setEvents] = useState<Event[]>([]);
  const [publicEvents, setPublicEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchEvents = async (): Promise<void> => {
    setLoading(true);
    setError(null);
    try {
      console.log('Fetching user events...');
      
      // Mock events data - Replace with real API call
      const mockEvents: Event[] = [
        {
          $id: 'event1',
          eventName: 'Weekend Hiking Trip',
          activityName: 'Morning Hike at Blue Mountains',
          activityId: '1',
          startDate: new Date(Date.now() + 86400000).toISOString(),
          startTime: '08:00',
          location: 'Blue Mountains, NSW',
          description: 'Join us for an amazing weekend hiking experience',
          maxParticipants: 15,
          currentParticipants: 8,
          participants: [
            { userId: 'user123', joinedAt: new Date().toISOString(), name: 'John Doe' },
            { userId: 'user456', joinedAt: new Date().toISOString(), name: 'Jane Smith' }
          ],
          organizerId: 'organizer1',
          organizer: { name: 'Sarah Wilson' },
          difficulty: 'intermediate',
          isPrivate: false,
          createdAt: new Date().toISOString(),
          inclusive: ['beginner-friendly', 'family-friendly'],
          tags: ['nature', 'fitness', 'social'],
          equipment: ['hiking boots', 'water bottle', 'backpack']
        },
        {
          $id: 'event2',
          eventName: 'Rock Climbing Session',
          activityName: 'Rock Climbing Adventure',
          activityId: '2',
          startDate: new Date(Date.now() + 172800000).toISOString(),
          startTime: '10:00',
          location: 'Katoomba, NSW',
          description: 'Beginner-friendly climbing session with equipment provided',
          maxParticipants: 10,
          currentParticipants: 5,
          participants: [
            { userId: 'user789', joinedAt: new Date().toISOString(), name: 'Mike Johnson' }
          ],
          organizerId: 'organizer2',
          organizer: { name: 'Tom Anderson' },
          difficulty: 'beginner',
          isPrivate: false,
          createdAt: new Date(Date.now() - 3600000).toISOString(),
          inclusive: ['beginner-friendly', 'wheelchair-accessible'],
          tags: ['adventure', 'strength', 'outdoor'],
          equipment: ['climbing shoes', 'harness', 'helmet']
        }
      ];
      
      setEvents(mockEvents);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch events';
      setError(errorMessage);
      console.error('Error fetching events:', err);
    } finally {
      setLoading(false);
    }
  };

  const fetchPublicEvents = async (): Promise<void> => {
    setLoading(true);
    setError(null);
    try {
      console.log('Fetching public events...');
      
      const mockPublicEvents: Event[] = [
        {
          $id: 'pub-event1',
          eventName: 'Community Beach Cleanup',
          activityName: 'Environmental Action',
          activityId: 'activity-env1',
          startDate: new Date(Date.now() + 259200000).toISOString(),
          startTime: '09:00',
          location: 'Bondi Beach, NSW',
          description: 'Join our community effort to keep our beaches clean',
          maxParticipants: 50,
          currentParticipants: 23,
          participants: Array.from({ length: 23 }, (_, i) => ({
            userId: `volunteer${i + 1}`,
            joinedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
            name: `Volunteer ${i + 1}`
          })),
          organizerId: 'env-org1',
          organizer: { name: 'Green Community Sydney' },
          difficulty: 'beginner',
          isPrivate: false,
          createdAt: new Date(Date.now() - 86400000).toISOString(),
          inclusive: ['family-friendly', 'beginner-friendly', 'senior-friendly'],
          tags: ['environment', 'community', 'volunteer'],
          equipment: ['gloves', 'sun hat', 'water bottle']
        }
      ];
      
      setPublicEvents(mockPublicEvents);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch public events';
      setError(errorMessage);
      console.error('Error fetching public events:', err);
    } finally {
      setLoading(false);
    }
  };

  const searchEvents = async (query: string, filters?: EventFilters): Promise<void> => {
    setLoading(true);
    setError(null);
    try {
      console.log('Searching events:', { query, filters });
      
      const allEvents = [...events, ...publicEvents];
      const filtered = allEvents.filter((event: Event) => {
        if (query && !event.eventName.toLowerCase().includes(query.toLowerCase())) {
          return false;
        }
        
        if (filters?.difficulty && filters.difficulty.length > 0) {
          if (!event.difficulty || !filters.difficulty.includes(event.difficulty)) {
            return false;
          }
        }
        
        return true;
      });
      
      setEvents(filtered);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to search events';
      setError(errorMessage);
      console.error('Error searching events:', err);
    } finally {
      setLoading(false);
    }
  };

  const joinEvent = async (eventId: string): Promise<void> => {
    try {
      console.log('Joining event:', eventId);
      
      // Fix: Properly type the participant parameter
      setEvents(prevEvents => 
        prevEvents.map((event: Event) => {
          if (event.$id === eventId) {
            const newParticipant: Participant = {
              userId: 'current-user',
              joinedAt: new Date().toISOString(),
              name: 'Current User'
            };
            
            return {
              ...event,
              participants: [...(event.participants || []), newParticipant],
              currentParticipants: (event.currentParticipants || 0) + 1
            };
          }
          return event;
        })
      );
      
      setPublicEvents(prevEvents => 
        prevEvents.map((event: Event) => {
          if (event.$id === eventId) {
            const newParticipant: Participant = {
              userId: 'current-user',
              joinedAt: new Date().toISOString(),
              name: 'Current User'
            };
            
            return {
              ...event,
              participants: [...(event.participants || []), newParticipant],
              currentParticipants: (event.currentParticipants || 0) + 1
            };
          }
          return event;
        })
      );
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to join event';
      setError(errorMessage);
      console.error('Error joining event:', err);
      throw err;
    }
  };

  const leaveEvent = async (eventId: string): Promise<void> => {
    try {
      console.log('Leaving event:', eventId);
      
      // Fix: Properly type the participant parameter in filter function
      setEvents(prevEvents => 
        prevEvents.map((event: Event) => ({
          ...event,
          participants: event.participants?.filter((p: Participant) => p.userId !== 'current-user') || [],
          currentParticipants: Math.max((event.currentParticipants || 1) - 1, 0)
        }))
      );
      
      setPublicEvents(prevEvents => 
        prevEvents.map((event: Event) => ({
          ...event,
          participants: event.participants?.filter((p: Participant) => p.userId !== 'current-user') || [],
          currentParticipants: Math.max((event.currentParticipants || 1) - 1, 0)
        }))
      );
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to leave event';
      setError(errorMessage);
      console.error('Error leaving event:', err);
      throw err;
    }
  };

  const createEvent = async (eventData: Partial<Event>): Promise<Event> => {
    try {
      console.log('Creating event:', eventData);
      
      const newEvent: Event = {
        $id: `event-${Date.now()}`,
        eventName: eventData.eventName || 'New Event',
        startDate: eventData.startDate || new Date().toISOString(),
        organizerId: 'current-user',
        organizer: { name: 'Current User' },
        difficulty: eventData.difficulty || 'beginner',
        isPrivate: eventData.isPrivate || false,
        createdAt: new Date().toISOString(),
        currentParticipants: 0,
        participants: [],
        ...eventData
      };
      
      setEvents(prev => [newEvent, ...prev]);
      return newEvent;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to create event';
      setError(errorMessage);
      console.error('Error creating event:', err);
      throw err;
    }
  };

  const updateEvent = async (id: string, eventData: Partial<Event>): Promise<Event> => {
    try {
      console.log('Updating event:', id, eventData);
      
      let updatedEvent: Event | null = null;
      
      setEvents(prev => 
        prev.map((event: Event) => {
          if (event.$id === id) {
            updatedEvent = { ...event, ...eventData, updatedAt: new Date().toISOString() };
            return updatedEvent;
          }
          return event;
        })
      );
      
      if (!updatedEvent) {
        throw new Error('Event not found');
      }
      
      return updatedEvent;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to update event';
      setError(errorMessage);
      console.error('Error updating event:', err);
      throw err;
    }
  };

  const deleteEvent = async (id: string): Promise<void> => {
    try {
      console.log('Deleting event:', id);
      
      setEvents(prev => prev.filter((event: Event) => event.$id !== id));
      setPublicEvents(prev => prev.filter((event: Event) => event.$id !== id));
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to delete event';
      setError(errorMessage);
      console.error('Error deleting event:', err);
      throw err;
    }
  };

  return {
    events,
    publicEvents,
    loading,
    error,
    fetchEvents,
    fetchPublicEvents,
    searchEvents,
    joinEvent,
    leaveEvent,
    createEvent,
    updateEvent,
    deleteEvent
  };
};

================================================================================
FILE: C:\Users\nmera\AdventureOne\web\types\index.ts
================================================================================
// types/index.ts - Complete TypeScript interfaces for AdventureOne web app

export interface User {
  $id: string;
  name?: string;
  email: string;
  location?: {
    address: string;
    latitude: number;
    longitude: number;
  };
  searchRadius?: number;
  disciplines?: string[];
  emailVerification?: boolean;
  phoneVerification?: boolean;
  createdAt?: string;
  avatar?: string;
  bio?: string;
  stats?: {
    activitiesCreated: number;
    eventsHosted: number;
    eventsJoined: number;
  };
}

export interface Activity {
  $id: string;
  activityname: string;
  location: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  types?: string[];
  eventCount?: number;
  participantCount?: number;
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  isPrivate?: boolean;
  userId: string;
  createdAt: string;
  updatedAt?: string;
  rating?: number;
  reviewCount?: number;
  externalUrls?: string[];
  inclusive?: string[];
  subTypes?: string[];
  typeSpecificData?: Record<string, any>;
}

export interface Event {
  $id: string;
  eventName: string;
  activityName?: string;
  activityId?: string;
  startDate: string;
  startTime?: string;
  endDate?: string;
  endTime?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  maxParticipants?: number;
  currentParticipants?: number;
  participants?: Array<{ 
    userId: string; 
    joinedAt: string; 
    name?: string; 
  }>;
  organizerId: string;
  organizer?: {
    name: string;
    avatar?: string;
  };
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  inclusive?: string[];
  isPrivate?: boolean;
  createdAt: string;
  updatedAt?: string;
  tags?: string[];
  requirements?: string[];
  equipment?: string[];
}

export interface FeedItem {
  $id: string;
  type: 'activity' | 'event';
  timestamp: string;
  // Include all properties from both Activity and Event
  activityname?: string;
  eventName?: string;
  location?: string | { 
    address: string; 
    latitude: number; 
    longitude: number; 
  };
  description?: string;
  types?: string[];
  difficulty?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  isPrivate?: boolean;
  userId?: string;
  organizerId?: string;
  createdAt?: string;
  startDate?: string;
  eventCount?: number;
  participantCount?: number;
  currentParticipants?: number;
  maxParticipants?: number;
  participants?: Array<{ 
    userId: string; 
    joinedAt: string; 
    name?: string; 
  }>;
  // Add any other properties that might be accessed
  [key: string]: any;
}

export interface Comment {
  $id: string;
  content: string;
  userId: string;
  user?: {
    name: string;
    avatar?: string;
  };
  createdAt: string;
  updatedAt?: string;
  replies?: Comment[];
  parentId?: string;
}

export interface Notification {
  $id: string;
  type: 'event_invitation' | 'event_reminder' | 'activity_update' | 'comment' | 'like';
  title: string;
  message: string;
  userId: string;
  read: boolean;
  createdAt: string;
  data?: {
    activityId?: string;
    eventId?: string;
    commentId?: string;
    [key: string]: any;
  };
}

export interface Subscription {
  plan: 'free' | 'pro' | 'pro-plus';
  status: 'active' | 'inactive' | 'cancelled';
  currentPeriodEnd?: string;
  limits: {
    activities: number;
    events: number;
    participants: number;
    fileUploads: number;
  };
  usage: {
    activities: number;
    events: number;
    participants: number;
    fileUploads: number;
  };
}

export interface SearchFilters {
  query?: string;
  types?: string[];
  difficulty?: string[];
  dateRange?: {
    start: string;
    end: string;
  };
  location?: {
    address: string;
    radius: number;
  };
  maxParticipants?: number;
  inclusive?: string[];
  nearMe?: boolean;
}

export interface ActivityFilters extends SearchFilters {
  hasEvents?: boolean;
  privacy?: 'public' | 'private' | 'all';
}

export interface EventFilters extends SearchFilters {
  status?: 'upcoming' | 'ongoing' | 'completed' | 'all';
  availability?: 'available' | 'full' | 'all';
}

// Component prop types
export interface ActivityCardProps {
  activity: Activity;
  onPress?: () => void;
  user?: User | null;
  showActions?: boolean;
  compact?: boolean;
}

export interface EventCardProps {
  event: Event;
  onPress?: () => void;
  onJoin?: () => void;
  onLeave?: () => void;
  user?: User | null;
  isGrid?: boolean;
  showActions?: boolean;
}

export interface UserStatsCardProps {
  user: User;
  stats?: {
    activitiesCreated: number;
    eventsHosted: number;
    eventsJoined: number;
    totalParticipants: number;
  };
}

// Hook return types
export interface UseActivitiesReturn {
  activities: Activity[];
  publicActivities: Activity[];
  loading: boolean;
  error: string | null;
  fetchActivities: () => Promise<void>;
  fetchPublicActivities: () => Promise<void>;
  searchActivities: (query: string, filters?: ActivityFilters) => Promise<void>;
  createActivity: (activity: Partial<Activity>) => Promise<Activity>;
  updateActivity: (id: string, activity: Partial<Activity>) => Promise<Activity>;
  deleteActivity: (id: string) => Promise<void>;
}

export interface UseEventsReturn {
  events: Event[];
  publicEvents: Event[];
  loading: boolean;
  error: string | null;
  fetchEvents: () => Promise<void>;
  fetchPublicEvents: () => Promise<void>;
  searchEvents: (query: string, filters?: EventFilters) => Promise<void>;
  joinEvent: (eventId: string) => Promise<void>;
  leaveEvent: (eventId: string) => Promise<void>;
  createEvent: (event: Partial<Event>) => Promise<Event>;
  updateEvent: (id: string, event: Partial<Event>) => Promise<Event>;
  deleteEvent: (id: string) => Promise<void>;
}

export interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
}

================================================================================
FILE: package.json
================================================================================
{
  "name": "@chat-platform/web",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "@headlessui/tailwindcss": "^0.2.2",
    "@heroicons/react": "^2.2.0",
    "@redux-devtools/extension": "^3.3.0",
    "@tailwindcss/forms": "^0.5.10",
    "appwrite": "^18.1.1",
    "axios": "^1.10.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "next": "15.4.2",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hot-toast": "^2.5.2",
    "types": "^0.1.1",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "typescript": "^5"
  }
}


================================================================================
FILE: tsconfig.json
================================================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "es6"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@/components/*": ["./components/*"],
      "@/pages/*": ["./pages/*"],
      "@/styles/*": ["./styles/*"],
      "@/types/*": ["./types/*"],
      "@/types": ["./types/index"],
      "@/hooks/*": ["./hooks/*"],
      "@/contexts/*": ["./contexts/*"],
      "@/lib/*": ["./lib/*"],
      "@/utils/*": ["./utils/*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

================================================================================
FILE: next.config.ts
================================================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  reactStrictMode: true,
};

export default nextConfig;


